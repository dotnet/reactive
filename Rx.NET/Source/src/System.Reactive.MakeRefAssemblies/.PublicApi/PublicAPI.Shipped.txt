#nullable enable
System.Reactive.Concurrency.IConcurrencyAbstractionLayer
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.QueueUserWorkItem(System.Action<object?>! action, object? state) -> System.IDisposable!
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.Sleep(System.TimeSpan timeout) -> void
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartPeriodicTimer(System.Action! action, System.TimeSpan period) -> System.IDisposable!
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartThread(System.Action<object?>! action, object? state) -> void
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartTimer(System.Action<object?>! action, object? state, System.TimeSpan dueTime) -> System.IDisposable!
System.Reactive.Concurrency.IConcurrencyAbstractionLayer.SupportsLongRunning.get -> bool
abstract System.Reactive.Concurrency.LocalScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
abstract System.Reactive.Concurrency.ScheduledItem<TAbsolute>.InvokeCore() -> System.IDisposable!
abstract System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Add(TAbsolute absolute, TRelative relative) -> TAbsolute
abstract System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.GetNext() -> System.Reactive.Concurrency.IScheduledItem<TAbsolute>?
abstract System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.ScheduleAbsolute<TState>(TState state, TAbsolute dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
abstract System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.ToDateTimeOffset(TAbsolute absolute) -> System.DateTimeOffset
abstract System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.ToRelative(System.TimeSpan timeSpan) -> TRelative
abstract System.Reactive.Disposables.StableCompositeDisposable.Dispose() -> void
abstract System.Reactive.Disposables.StableCompositeDisposable.IsDisposed.get -> bool
abstract System.Reactive.Notification<T>.Accept(System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> void
abstract System.Reactive.Notification<T>.Accept(System.IObserver<T>! observer) -> void
abstract System.Reactive.Notification<T>.Accept<TResult>(System.Func<T, TResult>! onNext, System.Func<System.Exception!, TResult>! onError, System.Func<TResult>! onCompleted) -> TResult
abstract System.Reactive.Notification<T>.Accept<TResult>(System.Reactive.IObserver<T, TResult>! observer) -> TResult
abstract System.Reactive.Notification<T>.Equals(System.Reactive.Notification<T>? other) -> bool
abstract System.Reactive.Notification<T>.Exception.get -> System.Exception?
abstract System.Reactive.Notification<T>.HasValue.get -> bool
abstract System.Reactive.Notification<T>.Kind.get -> System.Reactive.NotificationKind
abstract System.Reactive.Notification<T>.Value.get -> T
abstract System.Reactive.ObservableBase<T>.SubscribeCore(System.IObserver<T>! observer) -> System.IDisposable!
abstract System.Reactive.ObserverBase<T>.OnCompletedCore() -> void
abstract System.Reactive.ObserverBase<T>.OnErrorCore(System.Exception! error) -> void
abstract System.Reactive.ObserverBase<T>.OnNextCore(T value) -> void
abstract System.Reactive.Subjects.SubjectBase<T>.Dispose() -> void
abstract System.Reactive.Subjects.SubjectBase<T>.HasObservers.get -> bool
abstract System.Reactive.Subjects.SubjectBase<T>.IsDisposed.get -> bool
abstract System.Reactive.Subjects.SubjectBase<T>.OnCompleted() -> void
abstract System.Reactive.Subjects.SubjectBase<T>.OnError(System.Exception! error) -> void
abstract System.Reactive.Subjects.SubjectBase<T>.OnNext(T value) -> void
abstract System.Reactive.Subjects.SubjectBase<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
override System.Reactive.Concurrency.CurrentThreadScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.DefaultScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.DefaultScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.EventLoopScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.EventLoopScheduler.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
override System.Reactive.Concurrency.HistoricalScheduler.GetNext() -> System.Reactive.Concurrency.IScheduledItem<System.DateTimeOffset>?
override System.Reactive.Concurrency.HistoricalScheduler.ScheduleAbsolute<TState>(TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.HistoricalSchedulerBase.Add(System.DateTimeOffset absolute, System.TimeSpan relative) -> System.DateTimeOffset
override System.Reactive.Concurrency.HistoricalSchedulerBase.ToDateTimeOffset(System.DateTimeOffset absolute) -> System.DateTimeOffset
override System.Reactive.Concurrency.HistoricalSchedulerBase.ToRelative(System.TimeSpan timeSpan) -> System.TimeSpan
override System.Reactive.Concurrency.ImmediateScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.ImmediateScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.NewThreadScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.NewThreadScheduler.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
override System.Reactive.Concurrency.ScheduledItem<TAbsolute>.Equals(object? obj) -> bool
override System.Reactive.Concurrency.ScheduledItem<TAbsolute>.GetHashCode() -> int
override System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.TaskPoolScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.TaskPoolScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.TaskPoolScheduler.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
override System.Reactive.Concurrency.ThreadPoolScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.ThreadPoolScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Concurrency.ThreadPoolScheduler.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
override System.Reactive.Concurrency.VirtualTimeScheduler<TAbsolute, TRelative>.GetNext() -> System.Reactive.Concurrency.IScheduledItem<TAbsolute>?
override System.Reactive.Concurrency.VirtualTimeScheduler<TAbsolute, TRelative>.ScheduleAbsolute<TState>(TState state, TAbsolute dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
override System.Reactive.Disposables.SingleAssignmentDisposableValue.Equals(object? obj) -> bool
override System.Reactive.Disposables.SingleAssignmentDisposableValue.GetHashCode() -> int
override System.Reactive.EventPattern<TSender, TEventArgs>.Equals(object? obj) -> bool
override System.Reactive.EventPattern<TSender, TEventArgs>.GetHashCode() -> int
override System.Reactive.Notification<T>.Equals(object? obj) -> bool
override System.Reactive.Subjects.AsyncSubject<T>.Dispose() -> void
override System.Reactive.Subjects.AsyncSubject<T>.HasObservers.get -> bool
override System.Reactive.Subjects.AsyncSubject<T>.IsDisposed.get -> bool
override System.Reactive.Subjects.AsyncSubject<T>.OnCompleted() -> void
override System.Reactive.Subjects.AsyncSubject<T>.OnError(System.Exception! error) -> void
override System.Reactive.Subjects.AsyncSubject<T>.OnNext(T value) -> void
override System.Reactive.Subjects.AsyncSubject<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
override System.Reactive.Subjects.BehaviorSubject<T>.Dispose() -> void
override System.Reactive.Subjects.BehaviorSubject<T>.HasObservers.get -> bool
override System.Reactive.Subjects.BehaviorSubject<T>.IsDisposed.get -> bool
override System.Reactive.Subjects.BehaviorSubject<T>.OnCompleted() -> void
override System.Reactive.Subjects.BehaviorSubject<T>.OnError(System.Exception! error) -> void
override System.Reactive.Subjects.BehaviorSubject<T>.OnNext(T value) -> void
override System.Reactive.Subjects.BehaviorSubject<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
override System.Reactive.Subjects.ReplaySubject<T>.Dispose() -> void
override System.Reactive.Subjects.ReplaySubject<T>.HasObservers.get -> bool
override System.Reactive.Subjects.ReplaySubject<T>.IsDisposed.get -> bool
override System.Reactive.Subjects.ReplaySubject<T>.OnCompleted() -> void
override System.Reactive.Subjects.ReplaySubject<T>.OnError(System.Exception! error) -> void
override System.Reactive.Subjects.ReplaySubject<T>.OnNext(T value) -> void
override System.Reactive.Subjects.ReplaySubject<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
override System.Reactive.Subjects.Subject<T>.Dispose() -> void
override System.Reactive.Subjects.Subject<T>.HasObservers.get -> bool
override System.Reactive.Subjects.Subject<T>.IsDisposed.get -> bool
override System.Reactive.Subjects.Subject<T>.OnCompleted() -> void
override System.Reactive.Subjects.Subject<T>.OnError(System.Exception! error) -> void
override System.Reactive.Subjects.Subject<T>.OnNext(T value) -> void
override System.Reactive.Subjects.Subject<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
override System.Reactive.TimeInterval<T>.Equals(object? obj) -> bool
override System.Reactive.TimeInterval<T>.GetHashCode() -> int
override System.Reactive.TimeInterval<T>.ToString() -> string!
override System.Reactive.Timestamped<T>.Equals(object? obj) -> bool
override System.Reactive.Timestamped<T>.GetHashCode() -> int
override System.Reactive.Timestamped<T>.ToString() -> string!
override System.Reactive.Unit.Equals(object? obj) -> bool
override System.Reactive.Unit.GetHashCode() -> int
override System.Reactive.Unit.ToString() -> string!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source) -> System.IDisposable!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext) -> System.IDisposable!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action! onCompleted) -> System.IDisposable!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action! onCompleted, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action<System.Exception!>! onError) -> System.IDisposable!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.IDisposable!
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Action<T>! onNext, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.IObserver<T>! observer, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.Subscribe<T>(this System.IObservable<T>! source, System.Threading.CancellationToken token) -> void
static System.ObservableExtensions.SubscribeSafe<T>(this System.IObservable<T>! source, System.IObserver<T>! observer) -> System.IDisposable!
static System.Reactive.Concurrency.CurrentThreadScheduler.Instance.get -> System.Reactive.Concurrency.CurrentThreadScheduler!
static System.Reactive.Concurrency.CurrentThreadScheduler.IsScheduleRequired.get -> bool
static System.Reactive.Concurrency.DefaultScheduler.Instance.get -> System.Reactive.Concurrency.DefaultScheduler!
static System.Reactive.Concurrency.ImmediateScheduler.Instance.get -> System.Reactive.Concurrency.ImmediateScheduler!
static System.Reactive.Concurrency.NewThreadScheduler.Default.get -> System.Reactive.Concurrency.NewThreadScheduler!
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator !=(System.Reactive.Concurrency.ScheduledItem<TAbsolute>? left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>? right) -> bool
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator <(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>! right) -> bool
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator <=(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>! right) -> bool
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator ==(System.Reactive.Concurrency.ScheduledItem<TAbsolute>? left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>? right) -> bool
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator >(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>! right) -> bool
static System.Reactive.Concurrency.ScheduledItem<TAbsolute>.operator >=(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! left, System.Reactive.Concurrency.ScheduledItem<TAbsolute>! right) -> bool
static System.Reactive.Concurrency.Scheduler.AsLongRunning(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.ISchedulerLongRunning?
static System.Reactive.Concurrency.Scheduler.AsPeriodic(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.ISchedulerPeriodic?
static System.Reactive.Concurrency.Scheduler.AsStopwatchProvider(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.IStopwatchProvider?
static System.Reactive.Concurrency.Scheduler.Catch<TException>(this System.Reactive.Concurrency.IScheduler! scheduler, System.Func<TException!, bool>! handler) -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.CurrentThread.get -> System.Reactive.Concurrency.CurrentThreadScheduler!
static System.Reactive.Concurrency.Scheduler.Default.get -> System.Reactive.Concurrency.DefaultScheduler!
static System.Reactive.Concurrency.Scheduler.DisableOptimizations(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.DisableOptimizations(this System.Reactive.Concurrency.IScheduler! scheduler, params System.Type![]! optimizationInterfaces) -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.Immediate.get -> System.Reactive.Concurrency.ImmediateScheduler!
static System.Reactive.Concurrency.Scheduler.NewThread.get -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan timeSpan) -> System.TimeSpan
static System.Reactive.Concurrency.Scheduler.Now.get -> System.DateTimeOffset
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.Action! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.Action<System.Action!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime, System.Action! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime, System.Action<System.Action<System.DateTimeOffset>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime, System.Action! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime, System.Action<System.Action<System.TimeSpan>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.Action<TState, System.Action<TState>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.DateTimeOffset dueTime, System.Action<TState, System.Action<TState, System.DateTimeOffset>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Schedule<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.TimeSpan dueTime, System.Action<TState, System.Action<TState, System.TimeSpan>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleAsync<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.ScheduleLongRunning(this System.Reactive.Concurrency.ISchedulerLongRunning! scheduler, System.Action<System.Reactive.Disposables.ICancelable!>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.SchedulePeriodic(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan period, System.Action! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.SchedulePeriodic<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.TimeSpan period, System.Action<TState>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.SchedulePeriodic<TState>(this System.Reactive.Concurrency.IScheduler! scheduler, TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
static System.Reactive.Concurrency.Scheduler.Sleep(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Scheduler.Sleep(this System.Reactive.Concurrency.IScheduler! scheduler, System.DateTimeOffset dueTime, System.Threading.CancellationToken cancellationToken) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Scheduler.Sleep(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Scheduler.Sleep(this System.Reactive.Concurrency.IScheduler! scheduler, System.TimeSpan dueTime, System.Threading.CancellationToken cancellationToken) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Scheduler.StartStopwatch(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.IStopwatch!
static System.Reactive.Concurrency.Scheduler.TaskPool.get -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.ThreadPool.get -> System.Reactive.Concurrency.IScheduler!
static System.Reactive.Concurrency.Scheduler.Yield(this System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Scheduler.Yield(this System.Reactive.Concurrency.IScheduler! scheduler, System.Threading.CancellationToken cancellationToken) -> System.Reactive.Concurrency.SchedulerOperation!
static System.Reactive.Concurrency.Synchronization.ObserveOn<TSource>(System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.Synchronization.ObserveOn<TSource>(System.IObservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.Synchronization.SubscribeOn<TSource>(System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.Synchronization.SubscribeOn<TSource>(System.IObservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.Synchronization.Synchronize<TSource>(System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.Synchronization.Synchronize<TSource>(System.IObservable<TSource>! source, object! gate) -> System.IObservable<TSource>!
static System.Reactive.Concurrency.TaskPoolScheduler.Default.get -> System.Reactive.Concurrency.TaskPoolScheduler!
static System.Reactive.Concurrency.ThreadPoolScheduler.Instance.get -> System.Reactive.Concurrency.ThreadPoolScheduler!
static System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleAbsolute<TAbsolute, TRelative>(this System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>! scheduler, TAbsolute dueTime, System.Action! action) -> System.IDisposable!
static System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleRelative<TAbsolute, TRelative>(this System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>! scheduler, TRelative dueTime, System.Action! action) -> System.IDisposable!
static System.Reactive.Disposables.Disposable.Create(System.Action! dispose) -> System.IDisposable!
static System.Reactive.Disposables.Disposable.Create<TState>(TState state, System.Action<TState>! dispose) -> System.IDisposable!
static System.Reactive.Disposables.Disposable.Empty.get -> System.IDisposable!
static System.Reactive.Disposables.SingleAssignmentDisposableValue.operator !=(System.Reactive.Disposables.SingleAssignmentDisposableValue left, System.Reactive.Disposables.SingleAssignmentDisposableValue right) -> bool
static System.Reactive.Disposables.SingleAssignmentDisposableValue.operator ==(System.Reactive.Disposables.SingleAssignmentDisposableValue left, System.Reactive.Disposables.SingleAssignmentDisposableValue right) -> bool
static System.Reactive.Disposables.StableCompositeDisposable.Create(params System.IDisposable![]! disposables) -> System.Reactive.Disposables.ICancelable!
static System.Reactive.Disposables.StableCompositeDisposable.Create(System.Collections.Generic.IEnumerable<System.IDisposable!>! disposables) -> System.Reactive.Disposables.ICancelable!
static System.Reactive.Disposables.StableCompositeDisposable.Create(System.IDisposable! disposable1, System.IDisposable! disposable2) -> System.Reactive.Disposables.ICancelable!
static System.Reactive.EventPattern<TSender, TEventArgs>.operator !=(System.Reactive.EventPattern<TSender, TEventArgs>! first, System.Reactive.EventPattern<TSender, TEventArgs>! second) -> bool
static System.Reactive.EventPattern<TSender, TEventArgs>.operator ==(System.Reactive.EventPattern<TSender, TEventArgs>! first, System.Reactive.EventPattern<TSender, TEventArgs>! second) -> bool
static System.Reactive.Linq.Observable.Aggregate<TSource, TAccumulate, TResult>(this System.IObservable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator, System.Func<TAccumulate, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Aggregate<TSource, TAccumulate>(this System.IObservable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.IObservable<TAccumulate>!
static System.Reactive.Linq.Observable.Aggregate<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.All<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Amb<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Amb<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Amb<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.And<TLeft, TRight>(this System.IObservable<TLeft>! left, System.IObservable<TRight>! right) -> System.Reactive.Joins.Pattern<TLeft, TRight>!
static System.Reactive.Linq.Observable.Any<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Any<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Append<TSource>(this System.IObservable<TSource>! source, TSource value) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Append<TSource>(this System.IObservable<TSource>! source, TSource value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.AsObservable<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.AutoConnect<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers = 1, System.Action<System.IDisposable!>? onConnect = null) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<decimal>! source) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<decimal?>! source) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<double>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<double?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<float>! source) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<float?>! source) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<int>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<int?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<long>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average(this System.IObservable<long?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal>! selector) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal?>! selector) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float>! selector) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float?>! selector) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Average<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Buffer<TSource, TBufferBoundary>(this System.IObservable<TSource>! source, System.IObservable<TBufferBoundary>! bufferBoundaries) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource, TBufferClosing>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TBufferClosing>!>! bufferClosingSelector) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource, TBufferOpening, TBufferClosing>(this System.IObservable<TSource>! source, System.IObservable<TBufferOpening>! bufferOpenings, System.Func<TBufferOpening, System.IObservable<TBufferClosing>!>! bufferClosingSelector) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, int count, int skip) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, int count) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Buffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources, System.IObservable<TResult>! defaultSource) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Cast<TResult>(this System.IObservable<object!>! source) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Catch<TSource, TException>(this System.IObservable<TSource>! source, System.Func<TException!, System.IObservable<TSource>!>! handler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Catch<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Catch<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Catch<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Chunkify<TSource>(this System.IObservable<TSource>! source) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Collect<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TResult>! getInitialCollector, System.Func<TResult, TSource, TResult>! merge, System.Func<TResult, TResult>! getNewCollector) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Reactive.Linq.Observable.Collect<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TResult>! newCollector, System.Func<TResult, TSource, TResult>! merge) -> System.Collections.Generic.IEnumerable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource, TResult>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Func<System.Collections.Generic.IList<TSource>!, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TResult>(this System.IObservable<TSource1>! first, System.IObservable<TSource2>! second, System.Func<TSource1, TSource2, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.Func<TSource1, TSource2, TSource3, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.Func<TSource1, TSource2, TSource3, TSource4, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.IObservable<TSource16>! source16, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.CombineLatest<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.CombineLatest<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Concat<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Concat<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Concat<TSource>(this System.IObservable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Concat<TSource>(this System.IObservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Concat<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Contains<TSource>(this System.IObservable<TSource>! source, TSource value) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Contains<TSource>(this System.IObservable<TSource>! source, TSource value, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Count<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Count<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Action!>! subscribe) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.IDisposable!>! subscribe) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Action!>!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task<System.Action!>!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task<System.IDisposable!>!>! subscribeAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.DefaultIfEmpty<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.DefaultIfEmpty<TSource>(this System.IObservable<TSource>! source, TSource defaultValue) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Defer<TResult>(System.Func<System.IObservable<TResult>!>! observableFactory) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Defer<TResult>(System.Func<System.Threading.Tasks.Task<System.IObservable<TResult>!>!>! observableFactoryAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Defer<TResult>(System.Func<System.Threading.Tasks.Task<System.IObservable<TResult>!>!>! observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.DeferAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>! observableFactoryAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.DeferAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>! observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Delay<TSource, TDelay>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TDelay>!>! delayDurationSelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Delay<TSource, TDelay>(this System.IObservable<TSource>! source, System.IObservable<TDelay>! subscriptionDelay, System.Func<TSource, System.IObservable<TDelay>!>! delayDurationSelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Delay<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Delay<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Delay<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Delay<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DelaySubscription<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DelaySubscription<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DelaySubscription<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DelaySubscription<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Dematerialize<TSource>(this System.IObservable<System.Reactive.Notification<TSource>!>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Distinct<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Distinct<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Distinct<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Distinct<TSource>(this System.IObservable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DistinctUntilChanged<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DistinctUntilChanged<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DistinctUntilChanged<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DistinctUntilChanged<TSource>(this System.IObservable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Do<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Do<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext, System.Action! onCompleted) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Do<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Do<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Do<TSource>(this System.IObservable<TSource>! source, System.IObserver<TSource>! observer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.DoWhile<TSource>(this System.IObservable<TSource>! source, System.Func<bool>! condition) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.ElementAt<TSource>(this System.IObservable<TSource>! source, int index) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.ElementAtOrDefault<TSource>(this System.IObservable<TSource>! source, int index) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.Empty<TResult>() -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Empty<TResult>(System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Empty<TResult>(System.Reactive.Concurrency.IScheduler! scheduler, TResult witness) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Empty<TResult>(TResult witness) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Finally<TSource>(this System.IObservable<TSource>! source, System.Action! finallyAction) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.First<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.First<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.FirstAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.FirstAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.FirstOrDefault<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.FirstOrDefault<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.FirstOrDefaultAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.FirstOrDefaultAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.For<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.ForEach<TSource>(this System.IObservable<TSource>! source, System.Action<TSource, int>! onNext) -> void
static System.Reactive.Linq.Observable.ForEach<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext) -> void
static System.Reactive.Linq.Observable.ForEachAsync<TSource>(this System.IObservable<TSource>! source, System.Action<TSource, int>! onNext) -> System.Threading.Tasks.Task!
static System.Reactive.Linq.Observable.ForEachAsync<TSource>(this System.IObservable<TSource>! source, System.Action<TSource, int>! onNext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
static System.Reactive.Linq.Observable.ForEachAsync<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext) -> System.Threading.Tasks.Task!
static System.Reactive.Linq.Observable.ForEachAsync<TSource>(this System.IObservable<TSource>! source, System.Action<TSource>! onNext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.FromAsyncPattern(System.Func<System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4>(System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, TArg2, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, TArg2, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<TArg1, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TArg1>(System.Func<TArg1, System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Action<System.IAsyncResult!>! end) -> System.Func<TArg1, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.FromAsyncPattern<TResult>(System.Func<System.AsyncCallback!, object?, System.IAsyncResult!>! begin, System.Func<System.IAsyncResult!, TResult>! end) -> System.Func<System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.FromEvent(System.Action<System.Action!>! addHandler, System.Action<System.Action!>! removeHandler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromEvent(System.Action<System.Action!>! addHandler, System.Action<System.Action!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.FromEvent<TDelegate, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEvent<TDelegate, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEvent<TDelegate, TEventArgs>(System.Func<System.Action<TEventArgs>!, TDelegate>! conversion, System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEvent<TDelegate, TEventArgs>(System.Func<System.Action<TEventArgs>!, TDelegate>! conversion, System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEvent<TEventArgs>(System.Action<System.Action<TEventArgs>!>! addHandler, System.Action<System.Action<TEventArgs>!>! removeHandler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEvent<TEventArgs>(System.Action<System.Action<TEventArgs>!>! addHandler, System.Action<System.Action<TEventArgs>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TEventArgs>!
static System.Reactive.Linq.Observable.FromEventPattern(object! target, string! eventName) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern(object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern(System.Action<System.EventHandler!>! addHandler, System.Action<System.EventHandler!>! removeHandler) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern(System.Action<System.EventHandler!>! addHandler, System.Action<System.EventHandler!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern(System.Type! type, string! eventName) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern(System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TEventArgs>(System.Func<System.EventHandler<TEventArgs>!, TDelegate>! conversion, System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TEventArgs>(System.Func<System.EventHandler<TEventArgs>!, TDelegate>! conversion, System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TSender, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TDelegate, TSender, TEventArgs>(System.Action<TDelegate>! addHandler, System.Action<TDelegate>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(object! target, string! eventName) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(System.Action<System.EventHandler<TEventArgs>!>! addHandler, System.Action<System.EventHandler<TEventArgs>!>! removeHandler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(System.Action<System.EventHandler<TEventArgs>!>! addHandler, System.Action<System.EventHandler<TEventArgs>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(System.Type! type, string! eventName) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TEventArgs>(System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TSender, TEventArgs>(object! target, string! eventName) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TSender, TEventArgs>(object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TSender, TEventArgs>(System.Type! type, string! eventName) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.FromEventPattern<TSender, TEventArgs>(System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector, System.Func<TState, System.DateTimeOffset>! timeSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector, System.Func<TState, System.DateTimeOffset>! timeSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector, System.Func<TState, System.TimeSpan>! timeSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector, System.Func<TState, System.TimeSpan>! timeSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Generate<TState, TResult>(TState initialState, System.Func<TState, bool>! condition, System.Func<TState, TState>! iterate, System.Func<TState, TResult>! resultSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.GetAwaiter<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.Subjects.AsyncSubject<TSource>!
static System.Reactive.Linq.Observable.GetAwaiter<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source) -> System.Reactive.Subjects.AsyncSubject<TSource>!
static System.Reactive.Linq.Observable.GetEnumerator<TSource>(this System.IObservable<TSource>! source) -> System.Collections.Generic.IEnumerator<TSource>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, int capacity) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, int capacity) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>! durationSelector) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>! durationSelector, int capacity) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>! durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>! durationSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>! durationSelector) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>! durationSelector, int capacity) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>! durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>! durationSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Observable.GroupJoin<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.IObservable<TLeft>! left, System.IObservable<TRight>! right, System.Func<TLeft, System.IObservable<TLeftDuration>!>! leftDurationSelector, System.Func<TRight, System.IObservable<TRightDuration>!>! rightDurationSelector, System.Func<TLeft, System.IObservable<TRight>!, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.If<TResult>(System.Func<bool>! condition, System.IObservable<TResult>! thenSource) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.If<TResult>(System.Func<bool>! condition, System.IObservable<TResult>! thenSource, System.IObservable<TResult>! elseSource) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.If<TResult>(System.Func<bool>! condition, System.IObservable<TResult>! thenSource, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.IgnoreElements<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Interval(System.TimeSpan period) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Interval(System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.IsEmpty<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Join<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.IObservable<TLeft>! left, System.IObservable<TRight>! right, System.Func<TLeft, System.IObservable<TLeftDuration>!>! leftDurationSelector, System.Func<TRight, System.IObservable<TRightDuration>!>! rightDurationSelector, System.Func<TLeft, TRight, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Last<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.Last<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.LastAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.LastAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.LastOrDefault<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.LastOrDefault<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.LastOrDefaultAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.LastOrDefaultAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.Latest<TSource>(this System.IObservable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Reactive.Linq.Observable.LongCount<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.LongCount<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Materialize<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<System.Reactive.Notification<TSource>!>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<decimal>! source) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<decimal?>! source) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<double>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<double?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<float>! source) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<float?>! source) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<int>! source) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<int?>! source) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<long>! source) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Max(this System.IObservable<long?>! source) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.Max<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Max<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector, System.Collections.Generic.IComparer<TResult>! comparer) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal>! selector) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal?>! selector) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float>! selector) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float?>! selector) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int>! selector) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int?>! selector) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long>! selector) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Max<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long?>! selector) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.MaxBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.MaxBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Merge<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(System.Reactive.Concurrency.IScheduler! scheduler, params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, int maxConcurrent) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, int maxConcurrent, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.IObservable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.IObservable<System.IObservable<TSource>!>! sources, int maxConcurrent) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.IObservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Merge<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<decimal>! source) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<decimal?>! source) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<double>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<double?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<float>! source) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<float?>! source) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<int>! source) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<int?>! source) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<long>! source) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Min(this System.IObservable<long?>! source) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.Min<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Min<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector, System.Collections.Generic.IComparer<TResult>! comparer) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal>! selector) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal?>! selector) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float>! selector) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float?>! selector) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int>! selector) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int?>! selector) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long>! selector) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Min<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long?>! selector) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.MinBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.MinBy<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.MostRecent<TSource>(this System.IObservable<TSource>! source, TSource initialValue) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Reactive.Linq.Observable.Multicast<TSource, TIntermediate, TResult>(this System.IObservable<TSource>! source, System.Func<System.Reactive.Subjects.ISubject<TSource, TIntermediate>!>! subjectSelector, System.Func<System.IObservable<TIntermediate>!, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Multicast<TSource, TResult>(this System.IObservable<TSource>! source, System.Reactive.Subjects.ISubject<TSource, TResult>! subject) -> System.Reactive.Subjects.IConnectableObservable<TResult>!
static System.Reactive.Linq.Observable.Never<TResult>() -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Never<TResult>(TResult witness) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Next<TSource>(this System.IObservable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Reactive.Linq.Observable.ObserveOn<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.ObserveOn<TSource>(this System.IObservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.OfType<TResult>(this System.IObservable<object!>! source) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.OnErrorResumeNext<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.OnErrorResumeNext<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Prepend<TSource>(this System.IObservable<TSource>! source, TSource value) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Prepend<TSource>(this System.IObservable<TSource>! source, TSource value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Publish<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Publish<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, TSource initialValue) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Publish<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Publish<TSource>(this System.IObservable<TSource>! source, TSource initialValue) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.PublishLast<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.PublishLast<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Range(int start, int count) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Range(int start, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers, System.TimeSpan disconnectDelay) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers, System.TimeSpan disconnectDelay, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, System.TimeSpan disconnectDelay) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RefCount<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, System.TimeSpan disconnectDelay, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Repeat<TResult>(TResult value) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Repeat<TResult>(TResult value, int repeatCount) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Repeat<TResult>(TResult value, int repeatCount, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Repeat<TResult>(TResult value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Repeat<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Repeat<TSource>(this System.IObservable<TSource>! source, int repeatCount) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RepeatWhen<TSource, TSignal>(this System.IObservable<TSource>! source, System.Func<System.IObservable<object!>!, System.IObservable<TSignal>!>! handler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, int bufferSize) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, int bufferSize, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, int bufferSize, System.TimeSpan window) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, int bufferSize, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, System.TimeSpan window) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, int bufferSize) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, int bufferSize, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, int bufferSize, System.TimeSpan window) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, int bufferSize, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, System.TimeSpan window) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Replay<TSource>(this System.IObservable<TSource>! source, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.IConnectableObservable<TSource>!
static System.Reactive.Linq.Observable.Retry<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Retry<TSource>(this System.IObservable<TSource>! source, int retryCount) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.RetryWhen<TSource, TSignal>(this System.IObservable<TSource>! source, System.Func<System.IObservable<System.Exception!>!, System.IObservable<TSignal>!>! handler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Return<TResult>(TResult value) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Return<TResult>(TResult value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.RunAsync<TSource>(this System.IObservable<TSource>! source, System.Threading.CancellationToken cancellationToken) -> System.Reactive.Subjects.AsyncSubject<TSource>!
static System.Reactive.Linq.Observable.RunAsync<TSource>(this System.Reactive.Subjects.IConnectableObservable<TSource>! source, System.Threading.CancellationToken cancellationToken) -> System.Reactive.Subjects.AsyncSubject<TSource>!
static System.Reactive.Linq.Observable.Sample<TSource, TSample>(this System.IObservable<TSource>! source, System.IObservable<TSample>! sampler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Sample<TSource>(this System.IObservable<TSource>! source, System.TimeSpan interval) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Sample<TSource>(this System.IObservable<TSource>! source, System.TimeSpan interval, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Scan<TSource, TAccumulate>(this System.IObservable<TSource>! source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! accumulator) -> System.IObservable<TAccumulate>!
static System.Reactive.Linq.Observable.Scan<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, TSource, TSource>! accumulator) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Select<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, TResult>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Select<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, int, TCollection, int, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TCollection, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TCollection>!>! collectionSelector, System.Func<TSource, TCollection, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TOther>(this System.IObservable<TSource>! source, System.IObservable<TOther>! other) -> System.IObservable<TOther>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! onNext, System.Func<System.Exception!, System.IObservable<TResult>!>! onError, System.Func<System.IObservable<TResult>!>! onCompleted) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! onNext, System.Func<System.Exception!, System.IObservable<TResult>!>! onError, System.Func<System.IObservable<TResult>!>! onCompleted) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, int, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SelectMany<TSource, TTaskResult, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>! taskSelector, System.Func<TSource, TTaskResult, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.SequenceEqual<TSource>(this System.IObservable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.SequenceEqual<TSource>(this System.IObservable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.SequenceEqual<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.SequenceEqual<TSource>(this System.IObservable<TSource>! first, System.IObservable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.IObservable<bool>!
static System.Reactive.Linq.Observable.Single<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.Single<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.SingleAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SingleAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SingleOrDefault<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.SingleOrDefault<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource
static System.Reactive.Linq.Observable.SingleOrDefaultAsync<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.SingleOrDefaultAsync<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource?>!
static System.Reactive.Linq.Observable.Skip<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Skip<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Skip<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipLast<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipLast<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipLast<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipUntil<TSource, TOther>(this System.IObservable<TSource>! source, System.IObservable<TOther>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipUntil<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset startTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipUntil<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset startTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipWhile<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SkipWhile<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Start(System.Action! action) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.Start(System.Action! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.Start<TResult>(System.Func<TResult>! function) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Start<TResult>(System.Func<TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync(System.Func<System.Threading.Tasks.Task!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.StartWith<TSource>(this System.IObservable<TSource>! source, params TSource[]! values) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.StartWith<TSource>(this System.IObservable<TSource>! source, System.Collections.Generic.IEnumerable<TSource>! values) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.StartWith<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler, params TSource[]! values) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.StartWith<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler, System.Collections.Generic.IEnumerable<TSource>! values) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Subscribe<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.IObserver<TSource>! observer) -> System.IDisposable!
static System.Reactive.Linq.Observable.Subscribe<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.IObserver<TSource>! observer, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IDisposable!
static System.Reactive.Linq.Observable.SubscribeOn<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.SubscribeOn<TSource>(this System.IObservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<decimal>! source) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<decimal?>! source) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<double>! source) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<double?>! source) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<float>! source) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<float?>! source) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<int>! source) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<int?>! source) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<long>! source) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Sum(this System.IObservable<long?>! source) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal>! selector) -> System.IObservable<decimal>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, decimal?>! selector) -> System.IObservable<decimal?>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double>! selector) -> System.IObservable<double>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, double?>! selector) -> System.IObservable<double?>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float>! selector) -> System.IObservable<float>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, float?>! selector) -> System.IObservable<float?>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int>! selector) -> System.IObservable<int>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int?>! selector) -> System.IObservable<int?>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long>! selector) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Sum<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, long?>! selector) -> System.IObservable<long?>!
static System.Reactive.Linq.Observable.Switch<TSource>(this System.IObservable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Switch<TSource>(this System.IObservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Synchronize<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Synchronize<TSource>(this System.IObservable<TSource>! source, object! gate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Take<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Take<TSource>(this System.IObservable<TSource>! source, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Take<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Take<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLast<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLast<TSource>(this System.IObservable<TSource>! source, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLast<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLast<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLast<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! timerScheduler, System.Reactive.Concurrency.IScheduler! loopScheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeLastBuffer<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.TakeLastBuffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.TakeLastBuffer<TSource>(this System.IObservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.TakeUntil<TSource, TOther>(this System.IObservable<TSource>! source, System.IObservable<TOther>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeUntil<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset endTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeUntil<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset endTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeUntil<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! stopPredicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeWhile<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.TakeWhile<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Then<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
static System.Reactive.Linq.Observable.Throttle<TSource, TThrottle>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TThrottle>!>! throttleDurationSelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Throttle<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Throttle<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Throw<TResult>(System.Exception! exception) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Throw<TResult>(System.Exception! exception, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Throw<TResult>(System.Exception! exception, System.Reactive.Concurrency.IScheduler! scheduler, TResult witness) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Throw<TResult>(System.Exception! exception, TResult witness) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.TimeInterval<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<System.Reactive.TimeInterval<TSource>>!
static System.Reactive.Linq.Observable.TimeInterval<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.TimeInterval<TSource>>!
static System.Reactive.Linq.Observable.Timeout<TSource, TTimeout>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TTimeout>!>! timeoutDurationSelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource, TTimeout>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TTimeout>!>! timeoutDurationSelector, System.IObservable<TSource>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource, TTimeout>(this System.IObservable<TSource>! source, System.IObservable<TTimeout>! firstTimeout, System.Func<TSource, System.IObservable<TTimeout>!>! timeoutDurationSelector) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource, TTimeout>(this System.IObservable<TSource>! source, System.IObservable<TTimeout>! firstTimeout, System.Func<TSource, System.IObservable<TTimeout>!>! timeoutDurationSelector, System.IObservable<TSource>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime, System.IObservable<TSource>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime, System.IObservable<TSource>! other, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.IObservable<TSource>! other) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.IObservable<TSource>! other, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timeout<TSource>(this System.IObservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Timer(System.DateTimeOffset dueTime) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.DateTimeOffset dueTime, System.TimeSpan period) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.DateTimeOffset dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.TimeSpan dueTime) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.TimeSpan dueTime, System.TimeSpan period) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timer(System.TimeSpan dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<long>!
static System.Reactive.Linq.Observable.Timestamp<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<System.Reactive.Timestamped<TSource>>!
static System.Reactive.Linq.Observable.Timestamp<TSource>(this System.IObservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Timestamped<TSource>>!
static System.Reactive.Linq.Observable.ToArray<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<TSource[]!>!
static System.Reactive.Linq.Observable.ToAsync(this System.Action! action) -> System.Func<System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync(this System.Action! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Func<TArg1, TArg2, TArg3, TArg4, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Action<TArg1, TArg2, TArg3, TArg4>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Action<TArg1, TArg2, TArg3, TArg4>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Func<TArg1, TArg2, TArg3, TResult>! function) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Func<TArg1, TArg2, TArg3, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3>(this System.Action<TArg1, TArg2, TArg3>! action) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TArg3>(this System.Action<TArg1, TArg2, TArg3>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TResult>(this System.Func<TArg1, TArg2, TResult>! function) -> System.Func<TArg1, TArg2, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2, TResult>(this System.Func<TArg1, TArg2, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2>(this System.Action<TArg1, TArg2>! action) -> System.Func<TArg1, TArg2, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TArg2>(this System.Action<TArg1, TArg2>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TResult>(this System.Func<TArg1, TResult>! function) -> System.Func<TArg1, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1, TResult>(this System.Func<TArg1, TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1>(this System.Action<TArg1>! action) -> System.Func<TArg1, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TArg1>(this System.Action<TArg1>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, System.IObservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Observable.ToAsync<TResult>(this System.Func<TResult>! function) -> System.Func<System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToAsync<TResult>(this System.Func<TResult>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<System.IObservable<TResult>!>!
static System.Reactive.Linq.Observable.ToDictionary<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.IObservable<System.Collections.Generic.IDictionary<TKey, TElement>!>!
static System.Reactive.Linq.Observable.ToDictionary<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Collections.Generic.IDictionary<TKey, TElement>!>!
static System.Reactive.Linq.Observable.ToDictionary<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<System.Collections.Generic.IDictionary<TKey, TSource>!>!
static System.Reactive.Linq.Observable.ToDictionary<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Collections.Generic.IDictionary<TKey, TSource>!>!
static System.Reactive.Linq.Observable.ToEnumerable<TSource>(this System.IObservable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static System.Reactive.Linq.Observable.ToEvent(this System.IObservable<System.Reactive.Unit>! source) -> System.Reactive.IEventSource<System.Reactive.Unit>!
static System.Reactive.Linq.Observable.ToEvent<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.IEventSource<TSource>!
static System.Reactive.Linq.Observable.ToEventPattern<TEventArgs>(this System.IObservable<System.Reactive.EventPattern<TEventArgs>!>! source) -> System.Reactive.IEventPatternSource<TEventArgs>!
static System.Reactive.Linq.Observable.ToList<TSource>(this System.IObservable<TSource>! source) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.ToLookup<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.IObservable<System.Linq.ILookup<TKey, TElement>!>!
static System.Reactive.Linq.Observable.ToLookup<TSource, TKey, TElement>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Linq.ILookup<TKey, TElement>!>!
static System.Reactive.Linq.Observable.ToLookup<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.IObservable<System.Linq.ILookup<TKey, TSource>!>!
static System.Reactive.Linq.Observable.ToLookup<TSource, TKey>(this System.IObservable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.IObservable<System.Linq.ILookup<TKey, TSource>!>!
static System.Reactive.Linq.Observable.ToObservable<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.ToObservable<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Using<TResult, TResource>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResource>!>! resourceFactoryAsync, System.Func<TResource, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>! observableFactoryAsync) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Using<TResult, TResource>(System.Func<TResource>! resourceFactory, System.Func<TResource, System.IObservable<TResult>!>! observableFactory) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Wait<TSource>(this System.IObservable<TSource>! source) -> TSource
static System.Reactive.Linq.Observable.When<TResult>(params System.Reactive.Joins.Plan<TResult>![]! plans) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.When<TResult>(this System.Collections.Generic.IEnumerable<System.Reactive.Joins.Plan<TResult>!>! plans) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Where<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Where<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, int, bool>! predicate) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.While<TSource>(System.Func<bool>! condition, System.IObservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Observable.Window<TSource, TWindowBoundary>(this System.IObservable<TSource>! source, System.IObservable<TWindowBoundary>! windowBoundaries) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource, TWindowClosing>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TWindowClosing>!>! windowClosingSelector) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource, TWindowOpening, TWindowClosing>(this System.IObservable<TSource>! source, System.IObservable<TWindowOpening>! windowOpenings, System.Func<TWindowOpening, System.IObservable<TWindowClosing>!>! windowClosingSelector) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, int count) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, int count, int skip) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, int count) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.Window<TSource>(this System.IObservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Observable.WithLatestFrom<TFirst, TSecond, TResult>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.Func<TFirst, TSecond, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource, TResult>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Func<System.Collections.Generic.IList<TSource>!, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TResult>(this System.IObservable<TSource1>! first, System.Collections.Generic.IEnumerable<TSource2>! second, System.Func<TSource1, TSource2, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TResult>(this System.IObservable<TSource1>! first, System.IObservable<TSource2>! second, System.Func<TSource1, TSource2, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.Func<TSource1, TSource2, TSource3, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.Func<TSource1, TSource2, TSource3, TSource4, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.IObservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.IObservable<TSource16>! source16, System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.Observable.Zip<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Observable.Zip<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond, TThird>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third) -> System.IObservable<(TFirst First, TSecond Second, TThird Third)>!
static System.Reactive.Linq.ObservableEx.CombineLatest<TFirst, TSecond>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.IObservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.ObservableEx.Create(System.Func<System.Collections.Generic.IEnumerable<System.IObservable<object!>!>!>! iteratorMethod) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Linq.ObservableEx.Create<TResult>(System.Func<System.IObserver<TResult>!, System.Collections.Generic.IEnumerable<System.IObservable<object!>!>!>! iteratorMethod) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableEx.Expand<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TSource>!>! selector) -> System.IObservable<TSource>!
static System.Reactive.Linq.ObservableEx.Expand<TSource>(this System.IObservable<TSource>! source, System.Func<TSource, System.IObservable<TSource>!>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TSource>!
static System.Reactive.Linq.ObservableEx.ForkJoin<TSource1, TSource2, TResult>(this System.IObservable<TSource1>! first, System.IObservable<TSource2>! second, System.Func<TSource1, TSource2, TResult>! resultSelector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableEx.ForkJoin<TSource>(params System.IObservable<TSource>![]! sources) -> System.IObservable<TSource[]!>!
static System.Reactive.Linq.ObservableEx.ForkJoin<TSource>(this System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.IObservable<TSource[]!>!
static System.Reactive.Linq.ObservableEx.Let<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableEx.ManySelect<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, TResult>! selector) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableEx.ManySelect<TSource, TResult>(this System.IObservable<TSource>! source, System.Func<System.IObservable<TSource>!, TResult>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Linq.ObservableEx.ToListObservable<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.ListObservable<TSource>!
static System.Reactive.Linq.ObservableEx.WithLatestFrom<TFirst, TSecond>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.IObservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird, TFourth>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth) -> System.IObservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond, TThird>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third) -> System.IObservable<(TFirst First, TSecond Second, TThird Third)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond>(this System.IObservable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.IObservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.ObservableEx.Zip<TFirst, TSecond>(this System.IObservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.IObservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.Qbservable.Aggregate<TSource, TAccumulate, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>!>! accumulator, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Aggregate<TSource, TAccumulate>(this System.Reactive.Linq.IQbservable<TSource>! source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>!>! accumulator) -> System.Reactive.Linq.IQbservable<TAccumulate>!
static System.Reactive.Linq.Qbservable.Aggregate<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>!>! accumulator) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.All<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Amb<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Amb<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Amb<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.And<TLeft, TRight>(this System.Reactive.Linq.IQbservable<TLeft>! left, System.IObservable<TRight>! right) -> System.Reactive.Joins.QueryablePattern<TLeft, TRight>!
static System.Reactive.Linq.Qbservable.Any<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Any<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Append<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Append<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.AsObservable<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.IObservable<TSource>!
static System.Reactive.Linq.Qbservable.AsQbservable<TSource>(this System.IObservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.AutoConnect<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers, System.Linq.Expressions.Expression<System.Action<System.IDisposable!>!>! onConnect) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<decimal>! source) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<decimal?>! source) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<double>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<double?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<float>! source) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<float?>! source) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<int>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<int?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<long>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average(this System.Reactive.Linq.IQbservable<long?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Average<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Buffer<TSource, TBufferBoundary>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TBufferBoundary>! bufferBoundaries) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource, TBufferClosing>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TBufferClosing>!>!>! bufferClosingSelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource, TBufferOpening, TBufferClosing>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TBufferOpening>! bufferOpenings, System.Linq.Expressions.Expression<System.Func<TBufferOpening, System.IObservable<TBufferClosing>!>!>! bufferClosingSelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count, int skip) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, int count) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TValue>!>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TValue>!>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources, System.IObservable<TResult>! defaultSource) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TValue>!>! selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>!>! sources, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Cast<TResult>(this System.Reactive.Linq.IQbservable<object!>! source) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Catch<TSource, TException>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TException!, System.IObservable<TSource>!>!>! handler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Catch<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Catch<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Catch<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Chunkify<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Linq.IQueryable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Collect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TResult>!>! getInitialCollector, System.Linq.Expressions.Expression<System.Func<TResult, TSource, TResult>!>! merge, System.Linq.Expressions.Expression<System.Func<TResult, TResult>!>! getNewCollector) -> System.Linq.IQueryable<TResult>!
static System.Reactive.Linq.Qbservable.Collect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TResult>!>! newCollector, System.Linq.Expressions.Expression<System.Func<TResult, TSource, TResult>!>! merge) -> System.Linq.IQueryable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IList<TSource>!, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! first, System.IObservable<TSource2>! second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.IObservable<TSource16>! source16, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.CombineLatest<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Concat<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Concat<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Concat<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Concat<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Concat<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Contains<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Contains<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Count<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Count<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Action!>!>! subscribe) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.IDisposable!>!>! subscribe) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Action!>!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable!>!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task<System.Action!>!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Threading.Tasks.Task<System.IDisposable!>!>!>! subscribeAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.DefaultIfEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.DefaultIfEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource defaultValue) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Defer<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>!>!>! observableFactory) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Defer<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<System.IObservable<TResult>!>!>!>! observableFactoryAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Defer<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<System.IObservable<TResult>!>!>!>! observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.DeferAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>!>! observableFactoryAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.DeferAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>!>! observableFactoryAsync, bool ignoreExceptionsAfterUnsubscribe) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Delay<TSource, TDelay>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TDelay>! subscriptionDelay, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TDelay>!>!>! delayDurationSelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Delay<TSource, TDelay>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TDelay>!>!>! delayDurationSelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Dematerialize<TSource>(this System.Reactive.Linq.IQbservable<System.Reactive.Notification<TSource>!>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Distinct<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Distinct<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Distinct<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Distinct<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DistinctUntilChanged<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DistinctUntilChanged<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DistinctUntilChanged<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DistinctUntilChanged<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Do<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObserver<TSource>! observer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Do<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Action<TSource>!>! onNext) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Do<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Action<TSource>!>! onNext, System.Linq.Expressions.Expression<System.Action!>! onCompleted) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Do<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Action<TSource>!>! onNext, System.Linq.Expressions.Expression<System.Action<System.Exception!>!>! onError) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Do<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Action<TSource>!>! onNext, System.Linq.Expressions.Expression<System.Action<System.Exception!>!>! onError, System.Linq.Expressions.Expression<System.Action!>! onCompleted) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.DoWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<bool>!>! condition) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ElementAt<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int index) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ElementAtOrDefault<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int index) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.Empty<TResult>(this System.Reactive.Linq.IQbservableProvider! provider) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Empty<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Empty<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Concurrency.IScheduler! scheduler, TResult witness) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Empty<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult witness) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Finally<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Action!>! finallyAction) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.FirstAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.FirstAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.FirstOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.FirstOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.For<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>!>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TArg1>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult!>!>! end) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.FromAsyncPattern<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.AsyncCallback!, object!, System.IAsyncResult!>!>! begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult!, TResult>!>! end) -> System.Func<System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.FromEvent(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.Action!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.Action!>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromEvent(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.Action!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.Action!>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Action<TEventArgs>!, TDelegate>!>! conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Action<TEventArgs>!, TDelegate>!>! conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEvent<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>!>!>! removeHandler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEvent<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>!>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TEventArgs>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler!>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler!>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<object!>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.EventHandler<TEventArgs>!, TDelegate>!>! conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.EventHandler<TEventArgs>!, TDelegate>!>! conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TDelegate, TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>!>!>! removeHandler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>!>!>! addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>!>!>! removeHandler, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, object! target, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider! provider, System.Type! type, string! eventName, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>!>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.DateTimeOffset>!>! timeSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.DateTimeOffset>!>! timeSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.TimeSpan>!>! timeSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.TimeSpan>!>! timeSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, bool>!>! condition, System.Linq.Expressions.Expression<System.Func<TState, TState>!>! iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>!>! resultSelector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, int capacity) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, int capacity) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>!>! durationSelector) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>!>! durationSelector, int capacity) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>!>! durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!, System.IObservable<TDuration>!>!>! durationSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>!>! durationSelector) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>!>! durationSelector, int capacity) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>!>! durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!, System.IObservable<TDuration>!>!>! durationSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.GroupJoin<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.Reactive.Linq.IQbservable<TLeft>! left, System.IObservable<TRight>! right, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TLeftDuration>!>!>! leftDurationSelector, System.Linq.Expressions.Expression<System.Func<TRight, System.IObservable<TRightDuration>!>!>! rightDurationSelector, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TRight>!, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.If<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<bool>!>! condition, System.IObservable<TResult>! thenSource) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.If<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<bool>!>! condition, System.IObservable<TResult>! thenSource, System.IObservable<TResult>! elseSource) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.If<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<bool>!>! condition, System.IObservable<TResult>! thenSource, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.IgnoreElements<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Interval(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan period) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Interval(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.IsEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.Join<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.Reactive.Linq.IQbservable<TLeft>! left, System.IObservable<TRight>! right, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TLeftDuration>!>!>! leftDurationSelector, System.Linq.Expressions.Expression<System.Func<TRight, System.IObservable<TRightDuration>!>!>! rightDurationSelector, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.LastAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.LastAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.LastOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.LastOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.Latest<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static System.Reactive.Linq.Qbservable.LongCount<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.LongCount<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Materialize<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<System.Reactive.Notification<TSource>!>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<decimal>! source) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<decimal?>! source) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<double>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<double?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<float>! source) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<float?>! source) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<int>! source) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<int?>! source) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<long>! source) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Max(this System.Reactive.Linq.IQbservable<long?>! source) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.Max<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Max<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Collections.Generic.IComparer<TResult>! comparer) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Max<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.MaxBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.MaxBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>! sources, int maxConcurrent) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, int maxConcurrent) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, int maxConcurrent, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Merge<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Concurrency.IScheduler! scheduler, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<decimal>! source) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<decimal?>! source) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<double>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<double?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<float>! source) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<float?>! source) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<int>! source) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<int?>! source) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<long>! source) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Min(this System.Reactive.Linq.IQbservable<long?>! source) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.Min<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Min<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Collections.Generic.IComparer<TResult>! comparer) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Min<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.MinBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.MinBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.MostRecent<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource initialValue) -> System.Linq.IQueryable<TSource>!
static System.Reactive.Linq.Qbservable.Multicast<TSource, TIntermediate, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.Reactive.Subjects.ISubject<TSource, TIntermediate>!>!>! subjectSelector, System.Linq.Expressions.Expression<System.Func<System.IObservable<TIntermediate>!, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Never<TResult>(this System.Reactive.Linq.IQbservableProvider! provider) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Never<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult witness) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Next<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static System.Reactive.Linq.Qbservable.ObserveOn<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ObserveOn<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.OfType<TResult>(this System.Reactive.Linq.IQbservable<object!>! source) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Prepend<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Prepend<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, TSource value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Provider.get -> System.Reactive.Linq.IQbservableProvider!
static System.Reactive.Linq.Qbservable.Publish<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Publish<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, TSource initialValue) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.PublishLast<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Range(this System.Reactive.Linq.IQbservableProvider! provider, int start, int count) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Range(this System.Reactive.Linq.IQbservableProvider! provider, int start, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers, System.TimeSpan disconnectDelay) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, int minObservers, System.TimeSpan disconnectDelay, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, System.TimeSpan disconnectDelay) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Reactive.Subjects.IConnectableObservable<TSource>! source, System.TimeSpan disconnectDelay, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value, int repeatCount) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value, int repeatCount, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Repeat<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Repeat<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int repeatCount) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RepeatWhen<TSource, TSignal>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<object!>!, System.IObservable<TSignal>!>!>! handler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, int bufferSize) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, int bufferSize, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, int bufferSize, System.TimeSpan window) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, int bufferSize, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, System.TimeSpan window) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Retry<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Retry<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int retryCount) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.RetryWhen<TSource, TSignal>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<System.Exception!>!, System.IObservable<TSignal>!>!>! handler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Return<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Return<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, TResult value, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Sample<TSource, TSample>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TSample>! sampler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Sample<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan interval) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Sample<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan interval, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Scan<TSource, TAccumulate>(this System.Reactive.Linq.IQbservable<TSource>! source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>!>! accumulator) -> System.Reactive.Linq.IQbservable<TAccumulate>!
static System.Reactive.Linq.Qbservable.Scan<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>!>! accumulator) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Select<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, TResult>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Select<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>!>!>! collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TCollection, int, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TCollection>!>!>! collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TCollection, int, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>!>!>! collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TCollection>!>!>! collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TOther>! other) -> System.Reactive.Linq.IQbservable<TOther>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TResult>!>!>! onNext, System.Linq.Expressions.Expression<System.Func<System.Exception!, System.IObservable<TResult>!>!>! onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>!>!>! onCompleted) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.Tasks.Task<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>!>!>! onNext, System.Linq.Expressions.Expression<System.Func<System.Exception!, System.IObservable<TResult>!>!>! onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>!>!>! onCompleted) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>!>! taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TTaskResult, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Threading.Tasks.Task<TTaskResult>!>!>! taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, int, TTaskResult, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>!>!>! taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>!>!>! taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource>! first, System.IObservable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>! comparer) -> System.Reactive.Linq.IQbservable<bool>!
static System.Reactive.Linq.Qbservable.SingleAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SingleAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SingleOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource?>!
static System.Reactive.Linq.Qbservable.SingleOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipUntil<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TOther>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset startTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset startTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SkipWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Start(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action!>! action) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.Start(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.Start<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TResult>!>! function) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Start<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task!>!>! actionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>!>!>! functionAsync, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, params TSource[]! values) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Collections.Generic.IEnumerable<TSource>! values) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler, params TSource[]! values) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler, System.Collections.Generic.IEnumerable<TSource>! values) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SubscribeOn<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.SubscribeOn<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Threading.SynchronizationContext! context) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<decimal>! source) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<decimal?>! source) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<double>! source) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<double?>! source) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<float>! source) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<float?>! source) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<int>! source) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<int?>! source) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<long>! source) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Sum(this System.Reactive.Linq.IQbservable<long?>! source) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector) -> System.Reactive.Linq.IQbservable<decimal>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector) -> System.Reactive.Linq.IQbservable<decimal?>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector) -> System.Reactive.Linq.IQbservable<double>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector) -> System.Reactive.Linq.IQbservable<double?>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector) -> System.Reactive.Linq.IQbservable<float>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector) -> System.Reactive.Linq.IQbservable<float?>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector) -> System.Reactive.Linq.IQbservable<int>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector) -> System.Reactive.Linq.IQbservable<int?>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector) -> System.Reactive.Linq.IQbservable<long?>!
static System.Reactive.Linq.Qbservable.Switch<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Switch<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Synchronize<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Synchronize<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, object! gate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Take<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Take<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Take<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Take<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! timerScheduler, System.Reactive.Concurrency.IScheduler! loopScheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.TakeUntil<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TOther>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset endTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset endTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! stopPredicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.TakeWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Then<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
static System.Reactive.Linq.Qbservable.Throttle<TSource, TThrottle>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TThrottle>!>!>! throttleDurationSelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Throttle<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Throttle<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Throw<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Exception! exception) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Throw<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Exception! exception, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Throw<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Exception! exception, System.Reactive.Concurrency.IScheduler! scheduler, TResult witness) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Throw<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Exception! exception, TResult witness) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.TimeInterval<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>>!
static System.Reactive.Linq.Qbservable.TimeInterval<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>>!
static System.Reactive.Linq.Qbservable.Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TTimeout>! firstTimeout, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>!>!>! timeoutDurationSelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TTimeout>! firstTimeout, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>!>!>! timeoutDurationSelector, System.IObservable<TSource>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>!>!>! timeoutDurationSelector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>!>!>! timeoutDurationSelector, System.IObservable<TSource>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime, System.IObservable<TSource>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime, System.IObservable<TSource>! other, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.IObservable<TSource>! other) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.IObservable<TSource>! other, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.DateTimeOffset dueTime) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.DateTimeOffset dueTime, System.TimeSpan period) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.DateTimeOffset dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan dueTime) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan dueTime, System.TimeSpan period) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timer(this System.Reactive.Linq.IQbservableProvider! provider, System.TimeSpan dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<long>!
static System.Reactive.Linq.Qbservable.Timestamp<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>>!
static System.Reactive.Linq.Qbservable.Timestamp<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>>!
static System.Reactive.Linq.Qbservable.ToArray<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource[]!>!
static System.Reactive.Linq.Qbservable.ToAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action!>! action) -> System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4>!>! action) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TResult>!>! function) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3>!>! action) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TResult>!>! function) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2>!>! action) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TResult>!>! function) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TArg1, TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1>!>! action) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TArg1>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Action<TArg1>!>! action, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TResult>!>! function) -> System.Func<System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToAsync<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TResult>!>! function, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Func<System.Reactive.Linq.IQbservable<TResult>!>!
static System.Reactive.Linq.Qbservable.ToDictionary<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.ToDictionary<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.ToDictionary<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.ToDictionary<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.ToList<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.ToLookup<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector) -> System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.ToLookup<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>!>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>!>!
static System.Reactive.Linq.Qbservable.ToLookup<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.ToLookup<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>!>!
static System.Reactive.Linq.Qbservable.ToObservable<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ToObservable<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ToQbservable<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ToQbservable<TSource>(this System.Linq.IQueryable<TSource>! source, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.ToQueryable<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static System.Reactive.Linq.Qbservable.Using<TResult, TResource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResource>!>!>! resourceFactoryAsync, System.Linq.Expressions.Expression<System.Func<TResource, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>!>!>!>! observableFactoryAsync) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Using<TResult, TResource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<TResource>!>! resourceFactory, System.Linq.Expressions.Expression<System.Func<TResource, System.IObservable<TResult>!>!>! observableFactory) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.When<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, params System.Reactive.Joins.QueryablePlan<TResult>![]! plans) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.When<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.Reactive.Joins.QueryablePlan<TResult>!>! plans) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Where<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Where<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>!>! predicate) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.While<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<bool>!>! condition, System.IObservable<TSource>! source) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.Qbservable.Window<TSource, TWindowBoundary>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TWindowBoundary>! windowBoundaries) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource, TWindowClosing>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TWindowClosing>!>!>! windowClosingSelector) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource, TWindowOpening, TWindowClosing>(this System.Reactive.Linq.IQbservable<TSource>! source, System.IObservable<TWindowOpening>! windowOpenings, System.Linq.Expressions.Expression<System.Func<TWindowOpening, System.IObservable<TWindowClosing>!>!>! windowClosingSelector) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, int count, int skip) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, int count) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.Window<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<System.IObservable<TSource>!>!
static System.Reactive.Linq.Qbservable.WithLatestFrom<TFirst, TSecond, TResult>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources, System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IList<TSource>!, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! first, System.Collections.Generic.IEnumerable<TSource2>! second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! first, System.IObservable<TSource2>! second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! source1, System.IObservable<TSource2>! source2, System.IObservable<TSource3>! source3, System.IObservable<TSource4>! source4, System.IObservable<TSource5>! source5, System.IObservable<TSource6>! source6, System.IObservable<TSource7>! source7, System.IObservable<TSource8>! source8, System.IObservable<TSource9>! source9, System.IObservable<TSource10>! source10, System.IObservable<TSource11>! source11, System.IObservable<TSource12>! source12, System.IObservable<TSource13>! source13, System.IObservable<TSource14>! source14, System.IObservable<TSource15>! source15, System.IObservable<TSource16>! source16, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.Qbservable.Zip<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.Qbservable.Zip<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>!>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, TFifteenth, TSixteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth, System.IObservable<TFifteenth>! fifteenth, System.IObservable<TSixteenth>! sixteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth, TFifteenth Fifteenth, TSixteenth Sixteenth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, TFifteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth, System.IObservable<TFifteenth>! fifteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth, TFifteenth Fifteenth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth, TFifth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird, TFourth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond, TThird>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third)>!
static System.Reactive.Linq.QbservableEx.CombineLatest<TFirst, TSecond>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, TFifteenth, TSixteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth, System.IObservable<TFifteenth>! fifteenth, System.IObservable<TSixteenth>! sixteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth, TFifteenth Fifteenth, TSixteenth Sixteenth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth, TFifteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth, System.IObservable<TFifteenth>! fifteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth, TFifteenth Fifteenth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth, TFourteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth, System.IObservable<TFourteenth>! fourteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth, TFourteenth Fourteenth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth, TThirteenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth, System.IObservable<TThirteenth>! thirteenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth, TThirteenth Thirteenth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh, TTwelfth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh, System.IObservable<TTwelfth>! twelfth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh, TTwelfth Twelfth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth, TEleventh>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth, System.IObservable<TEleventh>! eleventh) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth, TEleventh Eleventh)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth, System.IObservable<TTenth>! tenth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth, TTenth Tenth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth, System.IObservable<TNinth>! ninth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth, TNinth Ninth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh, System.IObservable<TEighth>! eighth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh, TEighth Eighth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth, System.IObservable<TSeventh>! seventh) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth, TSeventh Seventh)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth, TSixth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth, System.IObservable<TSixth>! sixth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth, TSixth Sixth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth, TFifth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth, System.IObservable<TFifth>! fifth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth, TFifth Fifth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird, TFourth>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third, System.IObservable<TFourth>! fourth) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third, TFourth Fourth)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond, TThird>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second, System.IObservable<TThird>! third) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second, TThird Third)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second)>!
static System.Reactive.Notification.CreateOnCompleted<T>() -> System.Reactive.Notification<T>!
static System.Reactive.Notification.CreateOnError<T>(System.Exception! error) -> System.Reactive.Notification<T>!
static System.Reactive.Notification.CreateOnNext<T>(T value) -> System.Reactive.Notification<T>!
static System.Reactive.Notification<T>.operator !=(System.Reactive.Notification<T>! left, System.Reactive.Notification<T>! right) -> bool
static System.Reactive.Notification<T>.operator ==(System.Reactive.Notification<T>! left, System.Reactive.Notification<T>! right) -> bool
static System.Reactive.Observer.AsObserver<T>(this System.IObserver<T>! observer) -> System.IObserver<T>!
static System.Reactive.Observer.Checked<T>(this System.IObserver<T>! observer) -> System.IObserver<T>!
static System.Reactive.Observer.Create<T>(System.Action<T>! onNext) -> System.IObserver<T>!
static System.Reactive.Observer.Create<T>(System.Action<T>! onNext, System.Action! onCompleted) -> System.IObserver<T>!
static System.Reactive.Observer.Create<T>(System.Action<T>! onNext, System.Action<System.Exception!>! onError) -> System.IObserver<T>!
static System.Reactive.Observer.Create<T>(System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.IObserver<T>!
static System.Reactive.Observer.NotifyOn<T>(this System.IObserver<T>! observer, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObserver<T>!
static System.Reactive.Observer.NotifyOn<T>(this System.IObserver<T>! observer, System.Threading.SynchronizationContext! context) -> System.IObserver<T>!
static System.Reactive.Observer.Synchronize<T>(System.IObserver<T>! observer) -> System.IObserver<T>!
static System.Reactive.Observer.Synchronize<T>(System.IObserver<T>! observer, bool preventReentrancy) -> System.IObserver<T>!
static System.Reactive.Observer.Synchronize<T>(System.IObserver<T>! observer, object! gate) -> System.IObserver<T>!
static System.Reactive.Observer.Synchronize<T>(System.IObserver<T>! observer, System.Reactive.Concurrency.AsyncLock! asyncLock) -> System.IObserver<T>!
static System.Reactive.Observer.ToNotifier<T>(this System.IObserver<T>! observer) -> System.Action<System.Reactive.Notification<T>!>!
static System.Reactive.Observer.ToObserver<T>(this System.Action<System.Reactive.Notification<T>!>! handler) -> System.IObserver<T>!
static System.Reactive.Observer.ToObserver<T>(this System.IProgress<T>! progress) -> System.IObserver<T>!
static System.Reactive.Observer.ToProgress<T>(this System.IObserver<T>! observer) -> System.IProgress<T>!
static System.Reactive.Observer.ToProgress<T>(this System.IObserver<T>! observer, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IProgress<T>!
static System.Reactive.PlatformServices.EnlightenmentProvider.EnsureLoaded() -> bool
static System.Reactive.PlatformServices.HostLifecycleService.AddRef() -> void
static System.Reactive.PlatformServices.HostLifecycleService.Release() -> void
static System.Reactive.PlatformServices.HostLifecycleService.Resuming -> System.EventHandler<System.Reactive.PlatformServices.HostResumingEventArgs!>?
static System.Reactive.PlatformServices.HostLifecycleService.Suspending -> System.EventHandler<System.Reactive.PlatformServices.HostSuspendingEventArgs!>?
static System.Reactive.PlatformServices.HostLifecycleService.TrySetHostLifecycleNotifications(System.Reactive.PlatformServices.IHostLifecycleNotifications! notifications) -> bool
static System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current.get -> System.Reactive.PlatformServices.IPlatformEnlightenmentProvider!
static System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current.set -> void
static System.Reactive.PlatformServices.SystemClock.AddRef() -> void
static System.Reactive.PlatformServices.SystemClock.Release() -> void
static System.Reactive.PlatformServices.SystemClock.UtcNow.get -> System.DateTimeOffset
static System.Reactive.Subjects.Subject.Create<T>(System.IObserver<T>! observer, System.IObservable<T>! observable) -> System.Reactive.Subjects.ISubject<T>!
static System.Reactive.Subjects.Subject.Create<TSource, TResult>(System.IObserver<TSource>! observer, System.IObservable<TResult>! observable) -> System.Reactive.Subjects.ISubject<TSource, TResult>!
static System.Reactive.Subjects.Subject.Synchronize<TSource, TResult>(System.Reactive.Subjects.ISubject<TSource, TResult>! subject) -> System.Reactive.Subjects.ISubject<TSource, TResult>!
static System.Reactive.Subjects.Subject.Synchronize<TSource, TResult>(System.Reactive.Subjects.ISubject<TSource, TResult>! subject, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.ISubject<TSource, TResult>!
static System.Reactive.Subjects.Subject.Synchronize<TSource>(System.Reactive.Subjects.ISubject<TSource>! subject) -> System.Reactive.Subjects.ISubject<TSource>!
static System.Reactive.Subjects.Subject.Synchronize<TSource>(System.Reactive.Subjects.ISubject<TSource>! subject, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Subjects.ISubject<TSource>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(this System.Threading.Tasks.Task! task) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(this System.Threading.Tasks.Task! task, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(this System.Threading.Tasks.Task! task, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<System.Reactive.Unit>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable<TResult>(this System.Threading.Tasks.Task<TResult>! task) -> System.IObservable<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable<TResult>(this System.Threading.Tasks.Task<TResult>! task, System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable<TResult>(this System.Threading.Tasks.Task<TResult>! task, System.Reactive.Concurrency.TaskObservationOptions! options) -> System.IObservable<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, object? state) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, object? state, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, System.Threading.CancellationToken cancellationToken, object? state) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, System.Threading.CancellationToken cancellationToken, object? state, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask<TResult>(this System.IObservable<TResult>! observable, System.Threading.CancellationToken cancellationToken, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Threading.Tasks.Task<TResult>!
static System.Reactive.TimeInterval<T>.operator !=(System.Reactive.TimeInterval<T> first, System.Reactive.TimeInterval<T> second) -> bool
static System.Reactive.TimeInterval<T>.operator ==(System.Reactive.TimeInterval<T> first, System.Reactive.TimeInterval<T> second) -> bool
static System.Reactive.Timestamped.Create<T>(T value, System.DateTimeOffset timestamp) -> System.Reactive.Timestamped<T>
static System.Reactive.Timestamped<T>.operator !=(System.Reactive.Timestamped<T> first, System.Reactive.Timestamped<T> second) -> bool
static System.Reactive.Timestamped<T>.operator ==(System.Reactive.Timestamped<T> first, System.Reactive.Timestamped<T> second) -> bool
static System.Reactive.Unit.Default.get -> System.Reactive.Unit
static System.Reactive.Unit.operator !=(System.Reactive.Unit first, System.Reactive.Unit second) -> bool
static System.Reactive.Unit.operator ==(System.Reactive.Unit first, System.Reactive.Unit second) -> bool
static System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.Create() -> System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>
System.ObservableExtensions
System.Reactive.AnonymousObservable<T>
System.Reactive.AnonymousObservable<T>.AnonymousObservable(System.Func<System.IObserver<T>!, System.IDisposable!>! subscribe) -> void
System.Reactive.AnonymousObserver<T>
System.Reactive.AnonymousObserver<T>.AnonymousObserver(System.Action<T>! onNext) -> void
System.Reactive.AnonymousObserver<T>.AnonymousObserver(System.Action<T>! onNext, System.Action! onCompleted) -> void
System.Reactive.AnonymousObserver<T>.AnonymousObserver(System.Action<T>! onNext, System.Action<System.Exception!>! onError) -> void
System.Reactive.AnonymousObserver<T>.AnonymousObserver(System.Action<T>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> void
System.Reactive.Concurrency.AsyncLock
System.Reactive.Concurrency.AsyncLock.AsyncLock() -> void
System.Reactive.Concurrency.AsyncLock.Dispose() -> void
System.Reactive.Concurrency.AsyncLock.Wait(System.Action! action) -> void
System.Reactive.Concurrency.AsyncLock.Wait<TState>(TState state, System.Action<TState>! action) -> void
System.Reactive.Concurrency.CurrentThreadScheduler
System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired.get -> bool
System.Reactive.Concurrency.DefaultScheduler
System.Reactive.Concurrency.DefaultScheduler.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.EventLoopScheduler
System.Reactive.Concurrency.EventLoopScheduler.Dispose() -> void
System.Reactive.Concurrency.EventLoopScheduler.EventLoopScheduler() -> void
System.Reactive.Concurrency.EventLoopScheduler.EventLoopScheduler(System.Func<System.Threading.ThreadStart!, System.Threading.Thread!>! threadFactory) -> void
System.Reactive.Concurrency.EventLoopScheduler.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.HistoricalScheduler
System.Reactive.Concurrency.HistoricalScheduler.HistoricalScheduler() -> void
System.Reactive.Concurrency.HistoricalScheduler.HistoricalScheduler(System.DateTimeOffset initialClock) -> void
System.Reactive.Concurrency.HistoricalScheduler.HistoricalScheduler(System.DateTimeOffset initialClock, System.Collections.Generic.IComparer<System.DateTimeOffset>! comparer) -> void
System.Reactive.Concurrency.HistoricalSchedulerBase
System.Reactive.Concurrency.HistoricalSchedulerBase.HistoricalSchedulerBase() -> void
System.Reactive.Concurrency.HistoricalSchedulerBase.HistoricalSchedulerBase(System.DateTimeOffset initialClock) -> void
System.Reactive.Concurrency.HistoricalSchedulerBase.HistoricalSchedulerBase(System.DateTimeOffset initialClock, System.Collections.Generic.IComparer<System.DateTimeOffset>! comparer) -> void
System.Reactive.Concurrency.ImmediateScheduler
System.Reactive.Concurrency.IScheduledItem<TAbsolute>
System.Reactive.Concurrency.IScheduledItem<TAbsolute>.DueTime.get -> TAbsolute
System.Reactive.Concurrency.IScheduledItem<TAbsolute>.Invoke() -> void
System.Reactive.Concurrency.IScheduler
System.Reactive.Concurrency.IScheduler.Now.get -> System.DateTimeOffset
System.Reactive.Concurrency.IScheduler.Schedule<TState>(TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.IScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.IScheduler.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.ISchedulerLongRunning
System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning<TState>(TState state, System.Action<TState, System.Reactive.Disposables.ICancelable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.ISchedulerPeriodic
System.Reactive.Concurrency.ISchedulerPeriodic.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.IStopwatch
System.Reactive.Concurrency.IStopwatch.Elapsed.get -> System.TimeSpan
System.Reactive.Concurrency.IStopwatchProvider
System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
System.Reactive.Concurrency.LocalScheduler
System.Reactive.Concurrency.LocalScheduler.LocalScheduler() -> void
System.Reactive.Concurrency.NewThreadScheduler
System.Reactive.Concurrency.NewThreadScheduler.NewThreadScheduler() -> void
System.Reactive.Concurrency.NewThreadScheduler.NewThreadScheduler(System.Func<System.Threading.ThreadStart!, System.Threading.Thread!>! threadFactory) -> void
System.Reactive.Concurrency.NewThreadScheduler.ScheduleLongRunning<TState>(TState state, System.Action<TState, System.Reactive.Disposables.ICancelable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.NewThreadScheduler.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.ScheduledItem<TAbsolute, TValue>
System.Reactive.Concurrency.ScheduledItem<TAbsolute, TValue>.ScheduledItem(System.Reactive.Concurrency.IScheduler! scheduler, TValue state, System.Func<System.Reactive.Concurrency.IScheduler!, TValue, System.IDisposable!>! action, TAbsolute dueTime) -> void
System.Reactive.Concurrency.ScheduledItem<TAbsolute, TValue>.ScheduledItem(System.Reactive.Concurrency.IScheduler! scheduler, TValue state, System.Func<System.Reactive.Concurrency.IScheduler!, TValue, System.IDisposable!>! action, TAbsolute dueTime, System.Collections.Generic.IComparer<TAbsolute>! comparer) -> void
System.Reactive.Concurrency.ScheduledItem<TAbsolute>
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.Cancel() -> void
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.CompareTo(System.Reactive.Concurrency.ScheduledItem<TAbsolute>? other) -> int
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.DueTime.get -> TAbsolute
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.Invoke() -> void
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.IsCanceled.get -> bool
System.Reactive.Concurrency.ScheduledItem<TAbsolute>.ScheduledItem(TAbsolute dueTime, System.Collections.Generic.IComparer<TAbsolute>! comparer) -> void
System.Reactive.Concurrency.Scheduler
System.Reactive.Concurrency.SchedulerOperation
System.Reactive.Concurrency.SchedulerOperation.ConfigureAwait(bool continueOnCapturedContext) -> System.Reactive.Concurrency.SchedulerOperation!
System.Reactive.Concurrency.SchedulerOperation.GetAwaiter() -> System.Reactive.Concurrency.SchedulerOperationAwaiter!
System.Reactive.Concurrency.SchedulerOperationAwaiter
System.Reactive.Concurrency.SchedulerOperationAwaiter.GetResult() -> void
System.Reactive.Concurrency.SchedulerOperationAwaiter.IsCompleted.get -> bool
System.Reactive.Concurrency.SchedulerOperationAwaiter.OnCompleted(System.Action! continuation) -> void
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.Count.get -> int
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.Dequeue() -> System.Reactive.Concurrency.ScheduledItem<TAbsolute>!
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.Enqueue(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! scheduledItem) -> void
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.Peek() -> System.Reactive.Concurrency.ScheduledItem<TAbsolute>!
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.Remove(System.Reactive.Concurrency.ScheduledItem<TAbsolute>! scheduledItem) -> bool
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.SchedulerQueue() -> void
System.Reactive.Concurrency.SchedulerQueue<TAbsolute>.SchedulerQueue(int capacity) -> void
System.Reactive.Concurrency.Synchronization
System.Reactive.Concurrency.SynchronizationContextScheduler
System.Reactive.Concurrency.SynchronizationContextScheduler.SynchronizationContextScheduler(System.Threading.SynchronizationContext! context) -> void
System.Reactive.Concurrency.SynchronizationContextScheduler.SynchronizationContextScheduler(System.Threading.SynchronizationContext! context, bool alwaysPost) -> void
System.Reactive.Concurrency.TaskObservationOptions
System.Reactive.Concurrency.TaskObservationOptions.IgnoreExceptionsAfterUnsubscribe.get -> bool
System.Reactive.Concurrency.TaskObservationOptions.Scheduler.get -> System.Reactive.Concurrency.IScheduler?
System.Reactive.Concurrency.TaskObservationOptions.TaskObservationOptions(System.Reactive.Concurrency.IScheduler? scheduler, bool ignoreExceptionsAfterUnsubscribe) -> void
System.Reactive.Concurrency.TaskPoolScheduler
System.Reactive.Concurrency.TaskPoolScheduler.ScheduleLongRunning<TState>(TState state, System.Action<TState, System.Reactive.Disposables.ICancelable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.TaskPoolScheduler.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.TaskPoolScheduler.TaskPoolScheduler(System.Threading.Tasks.TaskFactory! taskFactory) -> void
System.Reactive.Concurrency.ThreadPoolScheduler
System.Reactive.Concurrency.ThreadPoolScheduler.ScheduleLongRunning<TState>(TState state, System.Action<TState, System.Reactive.Disposables.ICancelable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.ThreadPoolScheduler.SchedulePeriodic<TState>(TState state, System.TimeSpan period, System.Func<TState, TState>! action) -> System.IDisposable!
System.Reactive.Concurrency.VirtualTimeScheduler<TAbsolute, TRelative>
System.Reactive.Concurrency.VirtualTimeScheduler<TAbsolute, TRelative>.VirtualTimeScheduler() -> void
System.Reactive.Concurrency.VirtualTimeScheduler<TAbsolute, TRelative>.VirtualTimeScheduler(TAbsolute initialClock, System.Collections.Generic.IComparer<TAbsolute>! comparer) -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.AdvanceBy(TRelative time) -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.AdvanceTo(TAbsolute time) -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Clock.get -> TAbsolute
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Clock.set -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Comparer.get -> System.Collections.Generic.IComparer<TAbsolute>!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.IsEnabled.get -> bool
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Now.get -> System.DateTimeOffset
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Schedule<TState>(TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.ScheduleRelative<TState>(TState state, TRelative dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Sleep(TRelative time) -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Start() -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.Stop() -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.VirtualTimeSchedulerBase() -> void
System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.VirtualTimeSchedulerBase(TAbsolute initialClock, System.Collections.Generic.IComparer<TAbsolute>! comparer) -> void
System.Reactive.Concurrency.VirtualTimeSchedulerExtensions
System.Reactive.Disposables.BooleanDisposable
System.Reactive.Disposables.BooleanDisposable.BooleanDisposable() -> void
System.Reactive.Disposables.BooleanDisposable.Dispose() -> void
System.Reactive.Disposables.BooleanDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.CancellationDisposable
System.Reactive.Disposables.CancellationDisposable.CancellationDisposable() -> void
System.Reactive.Disposables.CancellationDisposable.CancellationDisposable(System.Threading.CancellationTokenSource! cts) -> void
System.Reactive.Disposables.CancellationDisposable.Dispose() -> void
System.Reactive.Disposables.CancellationDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.CancellationDisposable.Token.get -> System.Threading.CancellationToken
System.Reactive.Disposables.CompositeDisposable
System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable! item) -> void
System.Reactive.Disposables.CompositeDisposable.Clear() -> void
System.Reactive.Disposables.CompositeDisposable.CompositeDisposable() -> void
System.Reactive.Disposables.CompositeDisposable.CompositeDisposable(int capacity) -> void
System.Reactive.Disposables.CompositeDisposable.CompositeDisposable(params System.IDisposable![]! disposables) -> void
System.Reactive.Disposables.CompositeDisposable.CompositeDisposable(System.Collections.Generic.IEnumerable<System.IDisposable!>! disposables) -> void
System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable! item) -> bool
System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable![]! array, int arrayIndex) -> void
System.Reactive.Disposables.CompositeDisposable.Count.get -> int
System.Reactive.Disposables.CompositeDisposable.Dispose() -> void
System.Reactive.Disposables.CompositeDisposable.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.IDisposable!>!
System.Reactive.Disposables.CompositeDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.CompositeDisposable.IsReadOnly.get -> bool
System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable! item) -> bool
System.Reactive.Disposables.ContextDisposable
System.Reactive.Disposables.ContextDisposable.Context.get -> System.Threading.SynchronizationContext!
System.Reactive.Disposables.ContextDisposable.ContextDisposable(System.Threading.SynchronizationContext! context, System.IDisposable! disposable) -> void
System.Reactive.Disposables.ContextDisposable.Dispose() -> void
System.Reactive.Disposables.ContextDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.Disposable
System.Reactive.Disposables.ICancelable
System.Reactive.Disposables.ICancelable.IsDisposed.get -> bool
System.Reactive.Disposables.MultipleAssignmentDisposable
System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable.get -> System.IDisposable?
System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable.set -> void
System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose() -> void
System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.MultipleAssignmentDisposable.MultipleAssignmentDisposable() -> void
System.Reactive.Disposables.RefCountDisposable
System.Reactive.Disposables.RefCountDisposable.Dispose() -> void
System.Reactive.Disposables.RefCountDisposable.GetDisposable() -> System.IDisposable!
System.Reactive.Disposables.RefCountDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.RefCountDisposable.RefCountDisposable(System.IDisposable! disposable) -> void
System.Reactive.Disposables.RefCountDisposable.RefCountDisposable(System.IDisposable! disposable, bool throwWhenDisposed) -> void
System.Reactive.Disposables.ScheduledDisposable
System.Reactive.Disposables.ScheduledDisposable.Disposable.get -> System.IDisposable!
System.Reactive.Disposables.ScheduledDisposable.Dispose() -> void
System.Reactive.Disposables.ScheduledDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.ScheduledDisposable.ScheduledDisposable(System.Reactive.Concurrency.IScheduler! scheduler, System.IDisposable! disposable) -> void
System.Reactive.Disposables.ScheduledDisposable.Scheduler.get -> System.Reactive.Concurrency.IScheduler!
System.Reactive.Disposables.SerialDisposable
System.Reactive.Disposables.SerialDisposable.Disposable.get -> System.IDisposable?
System.Reactive.Disposables.SerialDisposable.Disposable.set -> void
System.Reactive.Disposables.SerialDisposable.Dispose() -> void
System.Reactive.Disposables.SerialDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.SerialDisposable.SerialDisposable() -> void
System.Reactive.Disposables.SingleAssignmentDisposable
System.Reactive.Disposables.SingleAssignmentDisposable.Disposable.get -> System.IDisposable?
System.Reactive.Disposables.SingleAssignmentDisposable.Disposable.set -> void
System.Reactive.Disposables.SingleAssignmentDisposable.Dispose() -> void
System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed.get -> bool
System.Reactive.Disposables.SingleAssignmentDisposable.SingleAssignmentDisposable() -> void
System.Reactive.Disposables.SingleAssignmentDisposableValue
System.Reactive.Disposables.SingleAssignmentDisposableValue.Disposable.get -> System.IDisposable?
System.Reactive.Disposables.SingleAssignmentDisposableValue.Disposable.set -> void
System.Reactive.Disposables.SingleAssignmentDisposableValue.Dispose() -> void
System.Reactive.Disposables.SingleAssignmentDisposableValue.IsDisposed.get -> bool
System.Reactive.Disposables.SingleAssignmentDisposableValue.SingleAssignmentDisposableValue() -> void
System.Reactive.Disposables.StableCompositeDisposable
System.Reactive.Disposables.StableCompositeDisposable.StableCompositeDisposable() -> void
System.Reactive.EventPattern<TEventArgs>
System.Reactive.EventPattern<TEventArgs>.EventPattern(object? sender, TEventArgs e) -> void
System.Reactive.EventPattern<TSender, TEventArgs>
System.Reactive.EventPattern<TSender, TEventArgs>.Deconstruct(out TSender? sender, out TEventArgs e) -> void
System.Reactive.EventPattern<TSender, TEventArgs>.Equals(System.Reactive.EventPattern<TSender, TEventArgs>? other) -> bool
System.Reactive.EventPattern<TSender, TEventArgs>.EventArgs.get -> TEventArgs
System.Reactive.EventPattern<TSender, TEventArgs>.EventPattern(TSender? sender, TEventArgs e) -> void
System.Reactive.EventPattern<TSender, TEventArgs>.Sender.get -> TSender?
System.Reactive.EventPatternSourceBase<TSender, TEventArgs>
System.Reactive.EventPatternSourceBase<TSender, TEventArgs>.Add(System.Delegate! handler, System.Action<TSender?, TEventArgs>! invoke) -> void
System.Reactive.EventPatternSourceBase<TSender, TEventArgs>.EventPatternSourceBase(System.IObservable<System.Reactive.EventPattern<TSender, TEventArgs>!>! source, System.Action<System.Action<TSender?, TEventArgs>!, System.Reactive.EventPattern<TSender, TEventArgs>!>! invokeHandler) -> void
System.Reactive.EventPatternSourceBase<TSender, TEventArgs>.Remove(System.Delegate! handler) -> void
System.Reactive.ExperimentalAttribute
System.Reactive.ExperimentalAttribute.ExperimentalAttribute() -> void
System.Reactive.IEventPattern<TSender, TEventArgs>
System.Reactive.IEventPattern<TSender, TEventArgs>.EventArgs.get -> TEventArgs
System.Reactive.IEventPattern<TSender, TEventArgs>.Sender.get -> TSender?
System.Reactive.IEventPatternSource<TEventArgs>
System.Reactive.IEventPatternSource<TEventArgs>.OnNext -> System.EventHandler<TEventArgs>!
System.Reactive.IEventSource<T>
System.Reactive.IEventSource<T>.OnNext -> System.Action<T>!
System.Reactive.IObserver<TValue, TResult>
System.Reactive.IObserver<TValue, TResult>.OnCompleted() -> TResult
System.Reactive.IObserver<TValue, TResult>.OnError(System.Exception! exception) -> TResult
System.Reactive.IObserver<TValue, TResult>.OnNext(TValue value) -> TResult
System.Reactive.ITaskObservable<T>
System.Reactive.ITaskObservable<T>.GetAwaiter() -> System.Reactive.ITaskObservableAwaiter<T>!
System.Reactive.ITaskObservableAwaiter<T>
System.Reactive.ITaskObservableAwaiter<T>.GetResult() -> T
System.Reactive.ITaskObservableAwaiter<T>.IsCompleted.get -> bool
System.Reactive.Joins.Pattern
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3>
System.Reactive.Joins.Pattern<TSource1, TSource2>
System.Reactive.Joins.Pattern<TSource1>
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>.And<TSource16>(System.IObservable<TSource16>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>.And<TSource15>(System.IObservable<TSource15>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>.And<TSource14>(System.IObservable<TSource14>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>.And<TSource13>(System.IObservable<TSource13>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>.And<TSource12>(System.IObservable<TSource12>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>.And<TSource11>(System.IObservable<TSource11>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>.And<TSource10>(System.IObservable<TSource10>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>.And<TSource9>(System.IObservable<TSource9>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>.And<TSource8>(System.IObservable<TSource8>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>.And<TSource7>(System.IObservable<TSource7>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5>.And<TSource6>(System.IObservable<TSource6>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4>.And<TSource5>(System.IObservable<TSource5>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4, TSource5>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TSource4, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3>.And<TSource4>(System.IObservable<TSource4>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3, TSource4>!
System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3>.Then<TResult>(System.Func<TSource1, TSource2, TSource3, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1, TSource2>.And<TSource3>(System.IObservable<TSource3>! other) -> System.Reactive.Joins.Pattern<TSource1, TSource2, TSource3>!
System.Reactive.Joins.Pattern<TSource1, TSource2>.Then<TResult>(System.Func<TSource1, TSource2, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Pattern<TSource1>.Then<TResult>(System.Func<TSource1, TResult>! selector) -> System.Reactive.Joins.Plan<TResult>!
System.Reactive.Joins.Plan<TResult>
System.Reactive.Joins.QueryablePattern
System.Reactive.Joins.QueryablePattern.Expression.get -> System.Linq.Expressions.Expression!
System.Reactive.Joins.QueryablePattern.QueryablePattern(System.Linq.Expressions.Expression! expression) -> void
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3>
System.Reactive.Joins.QueryablePattern<TSource1, TSource2>
System.Reactive.Joins.QueryablePlan<TResult>
System.Reactive.Joins.QueryablePlan<TResult>.Expression.get -> System.Linq.Expressions.Expression!
System.Reactive.Linq.IGroupedObservable<TKey, TElement>
System.Reactive.Linq.IGroupedObservable<TKey, TElement>.Key.get -> TKey
System.Reactive.Linq.IQbservable
System.Reactive.Linq.IQbservable.ElementType.get -> System.Type!
System.Reactive.Linq.IQbservable.Expression.get -> System.Linq.Expressions.Expression!
System.Reactive.Linq.IQbservable.Provider.get -> System.Reactive.Linq.IQbservableProvider!
System.Reactive.Linq.IQbservable<T>
System.Reactive.Linq.IQbservableProvider
System.Reactive.Linq.IQbservableProvider.CreateQuery<TResult>(System.Linq.Expressions.Expression! expression) -> System.Reactive.Linq.IQbservable<TResult>!
System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute
System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.LocalQueryMethodImplementationTypeAttribute(System.Type! targetType) -> void
System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.TargetType.get -> System.Type!
System.Reactive.Linq.Observable
System.Reactive.Linq.ObservableEx
System.Reactive.Linq.Qbservable
System.Reactive.Linq.QbservableEx
static System.Reactive.Linq.QbservableEx.Create(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IEnumerable<System.IObservable<object!>!>!>!>! iteratorMethod) -> System.Reactive.Linq.IQbservable<System.Reactive.Unit>!
static System.Reactive.Linq.QbservableEx.Create<TResult>(this System.Reactive.Linq.IQbservableProvider! provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>!, System.Collections.Generic.IEnumerable<System.IObservable<object!>!>!>!>! iteratorMethod) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.QbservableEx.Expand<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TSource>!>!>! selector) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.QbservableEx.Expand<TSource>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TSource>!>!>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TSource>!
static System.Reactive.Linq.QbservableEx.ForkJoin<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1>! first, System.IObservable<TSource2>! second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>!>! resultSelector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.QbservableEx.ForkJoin<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, params System.IObservable<TSource>![]! sources) -> System.Reactive.Linq.IQbservable<TSource[]!>!
static System.Reactive.Linq.QbservableEx.ForkJoin<TSource>(this System.Reactive.Linq.IQbservableProvider! provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>!>! sources) -> System.Reactive.Linq.IQbservable<TSource[]!>!
static System.Reactive.Linq.QbservableEx.Let<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, System.IObservable<TResult>!>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.QbservableEx.ManySelect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, TResult>!>! selector) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.QbservableEx.ManySelect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource>! source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>!, TResult>!>! selector, System.Reactive.Concurrency.IScheduler! scheduler) -> System.Reactive.Linq.IQbservable<TResult>!
static System.Reactive.Linq.QbservableEx.WithLatestFrom<TFirst, TSecond>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.IObservable<TSecond>! second) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second)>!
static System.Reactive.Linq.QbservableEx.Zip<TFirst, TSecond>(this System.Reactive.Linq.IQbservable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Reactive.Linq.IQbservable<(TFirst First, TSecond Second)>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>.And<TSource16>(System.IObservable<TSource16>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>.And<TSource15>(System.IObservable<TSource15>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>.And<TSource14>(System.IObservable<TSource14>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>.And<TSource13>(System.IObservable<TSource13>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>.And<TSource12>(System.IObservable<TSource12>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>.And<TSource11>(System.IObservable<TSource11>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>.And<TSource10>(System.IObservable<TSource10>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>.And<TSource9>(System.IObservable<TSource9>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>.And<TSource8>(System.IObservable<TSource8>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>.And<TSource7>(System.IObservable<TSource7>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5>.And<TSource6>(System.IObservable<TSource6>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4>.And<TSource5>(System.IObservable<TSource5>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3>.And<TSource4>(System.IObservable<TSource4>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2>.And<TSource3>(System.IObservable<TSource3>! other) -> System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3>!
System.Reactive.Joins.QueryablePattern<TSource1, TSource2>.Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>!>! selector) -> System.Reactive.Joins.QueryablePlan<TResult>!
System.Reactive.Linq.QueryDebugger
System.Reactive.Linq.QueryDebugger.QueryDebugger() -> void
System.Reactive.ListObservable<T>
System.Reactive.ListObservable<T>.Add(T item) -> void
System.Reactive.ListObservable<T>.Clear() -> void
System.Reactive.ListObservable<T>.Contains(T item) -> bool
System.Reactive.ListObservable<T>.CopyTo(T[]! array, int arrayIndex) -> void
System.Reactive.ListObservable<T>.Count.get -> int
System.Reactive.ListObservable<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
System.Reactive.ListObservable<T>.IndexOf(T item) -> int
System.Reactive.ListObservable<T>.Insert(int index, T item) -> void
System.Reactive.ListObservable<T>.IsReadOnly.get -> bool
System.Reactive.ListObservable<T>.ListObservable(System.IObservable<T>! source) -> void
System.Reactive.ListObservable<T>.Remove(T item) -> bool
System.Reactive.ListObservable<T>.RemoveAt(int index) -> void
System.Reactive.ListObservable<T>.Subscribe(System.IObserver<object!>! observer) -> System.IDisposable!
System.Reactive.ListObservable<T>.this[int index].get -> T
System.Reactive.ListObservable<T>.this[int index].set -> void
System.Reactive.ListObservable<T>.Value.get -> T
System.Reactive.Notification
System.Reactive.Notification<T>
System.Reactive.Notification<T>.Notification() -> void
System.Reactive.Notification<T>.ToObservable() -> System.IObservable<T>!
System.Reactive.Notification<T>.ToObservable(System.Reactive.Concurrency.IScheduler! scheduler) -> System.IObservable<T>!
System.Reactive.NotificationKind
System.Reactive.NotificationKind.OnCompleted = 2 -> System.Reactive.NotificationKind
System.Reactive.NotificationKind.OnError = 1 -> System.Reactive.NotificationKind
System.Reactive.NotificationKind.OnNext = 0 -> System.Reactive.NotificationKind
System.Reactive.ObservableBase<T>
System.Reactive.ObservableBase<T>.ObservableBase() -> void
System.Reactive.ObservableBase<T>.Subscribe(System.IObserver<T>! observer) -> System.IDisposable!
System.Reactive.Observer
System.Reactive.ObserverBase<T>
System.Reactive.ObserverBase<T>.Dispose() -> void
System.Reactive.ObserverBase<T>.ObserverBase() -> void
System.Reactive.ObserverBase<T>.OnCompleted() -> void
System.Reactive.ObserverBase<T>.OnError(System.Exception! error) -> void
System.Reactive.ObserverBase<T>.OnNext(T value) -> void
System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider
System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider.CurrentPlatformEnlightenmentProvider() -> void
System.Reactive.PlatformServices.DefaultSystemClock
System.Reactive.PlatformServices.DefaultSystemClock.DefaultSystemClock() -> void
System.Reactive.PlatformServices.DefaultSystemClock.UtcNow.get -> System.DateTimeOffset
System.Reactive.PlatformServices.EnlightenmentProvider
System.Reactive.PlatformServices.HostLifecycleService
System.Reactive.PlatformServices.HostResumingEventArgs
System.Reactive.PlatformServices.HostResumingEventArgs.HostResumingEventArgs() -> void
System.Reactive.PlatformServices.HostSuspendingEventArgs
System.Reactive.PlatformServices.HostSuspendingEventArgs.HostSuspendingEventArgs() -> void
System.Reactive.PlatformServices.IExceptionServices
System.Reactive.PlatformServices.IExceptionServices.Rethrow(System.Exception! exception) -> void
System.Reactive.PlatformServices.IHostLifecycleNotifications
System.Reactive.PlatformServices.IHostLifecycleNotifications.Resuming -> System.EventHandler<System.Reactive.PlatformServices.HostResumingEventArgs!>!
System.Reactive.PlatformServices.IHostLifecycleNotifications.Suspending -> System.EventHandler<System.Reactive.PlatformServices.HostSuspendingEventArgs!>!
System.Reactive.PlatformServices.INotifySystemClockChanged
System.Reactive.PlatformServices.INotifySystemClockChanged.SystemClockChanged -> System.EventHandler<System.Reactive.PlatformServices.SystemClockChangedEventArgs!>!
System.Reactive.PlatformServices.IPlatformEnlightenmentProvider
System.Reactive.PlatformServices.IPlatformEnlightenmentProvider.GetService<T>(params object![]! args) -> T?
System.Reactive.PlatformServices.ISystemClock
System.Reactive.PlatformServices.ISystemClock.UtcNow.get -> System.DateTimeOffset
System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor
System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.PeriodicTimerSystemClockMonitor(System.TimeSpan period) -> void
System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.SystemClockChanged -> System.EventHandler<System.Reactive.PlatformServices.SystemClockChangedEventArgs!>!
System.Reactive.PlatformServices.PlatformEnlightenmentProvider
System.Reactive.PlatformServices.SystemClock
System.Reactive.PlatformServices.SystemClockChangedEventArgs
System.Reactive.PlatformServices.SystemClockChangedEventArgs.NewTime.get -> System.DateTimeOffset
System.Reactive.PlatformServices.SystemClockChangedEventArgs.OldTime.get -> System.DateTimeOffset
System.Reactive.PlatformServices.SystemClockChangedEventArgs.SystemClockChangedEventArgs() -> void
System.Reactive.PlatformServices.SystemClockChangedEventArgs.SystemClockChangedEventArgs(System.DateTimeOffset oldTime, System.DateTimeOffset newTime) -> void
System.Reactive.Subjects.AsyncSubject<T>
System.Reactive.Subjects.AsyncSubject<T>.AsyncSubject() -> void
System.Reactive.Subjects.AsyncSubject<T>.GetAwaiter() -> System.Reactive.Subjects.AsyncSubject<T>!
System.Reactive.Subjects.AsyncSubject<T>.GetResult() -> T
System.Reactive.Subjects.AsyncSubject<T>.IsCompleted.get -> bool
System.Reactive.Subjects.AsyncSubject<T>.OnCompleted(System.Action! continuation) -> void
System.Reactive.Subjects.BehaviorSubject<T>
System.Reactive.Subjects.BehaviorSubject<T>.BehaviorSubject(T value) -> void
System.Reactive.Subjects.BehaviorSubject<T>.TryGetValue(out T value) -> bool
System.Reactive.Subjects.BehaviorSubject<T>.Value.get -> T
System.Reactive.Subjects.IConnectableObservable<T>
System.Reactive.Subjects.IConnectableObservable<T>.Connect() -> System.IDisposable!
System.Reactive.Subjects.ISubject<T>
System.Reactive.Subjects.ISubject<TSource, TResult>
System.Reactive.Subjects.ReplaySubject<T>
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject() -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(int bufferSize) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(int bufferSize, System.Reactive.Concurrency.IScheduler! scheduler) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(int bufferSize, System.TimeSpan window) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(int bufferSize, System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(System.Reactive.Concurrency.IScheduler! scheduler) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(System.TimeSpan window) -> void
System.Reactive.Subjects.ReplaySubject<T>.ReplaySubject(System.TimeSpan window, System.Reactive.Concurrency.IScheduler! scheduler) -> void
System.Reactive.Subjects.Subject
System.Reactive.Subjects.Subject<T>
System.Reactive.Subjects.Subject<T>.Subject() -> void
System.Reactive.Subjects.SubjectBase<T>
System.Reactive.Subjects.SubjectBase<T>.SubjectBase() -> void
System.Reactive.Threading.Tasks.TaskObservableExtensions
System.Reactive.TimeInterval<T>
System.Reactive.TimeInterval<T>.Deconstruct(out T value, out System.TimeSpan interval) -> void
System.Reactive.TimeInterval<T>.Equals(System.Reactive.TimeInterval<T> other) -> bool
System.Reactive.TimeInterval<T>.Interval.get -> System.TimeSpan
System.Reactive.TimeInterval<T>.TimeInterval() -> void
System.Reactive.TimeInterval<T>.TimeInterval(T value, System.TimeSpan interval) -> void
System.Reactive.TimeInterval<T>.Value.get -> T
System.Reactive.Timestamped
System.Reactive.Timestamped<T>
System.Reactive.Timestamped<T>.Deconstruct(out T value, out System.DateTimeOffset timestamp) -> void
System.Reactive.Timestamped<T>.Equals(System.Reactive.Timestamped<T> other) -> bool
System.Reactive.Timestamped<T>.Timestamp.get -> System.DateTimeOffset
System.Reactive.Timestamped<T>.Timestamped() -> void
System.Reactive.Timestamped<T>.Timestamped(T value, System.DateTimeOffset timestamp) -> void
System.Reactive.Timestamped<T>.Value.get -> T
System.Reactive.Unit
System.Reactive.Unit.Equals(System.Reactive.Unit other) -> bool
System.Reactive.Unit.Unit() -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.SetException(System.Exception! exception) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.SetResult(T result) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine! stateMachine) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.Start<TStateMachine>(ref TStateMachine stateMachine) -> void
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.Task.get -> System.Reactive.ITaskObservable<T>!
System.Runtime.CompilerServices.TaskObservableMethodBuilder<T>.TaskObservableMethodBuilder() -> void
virtual System.Reactive.Concurrency.LocalScheduler.GetService(System.Type! serviceType) -> object?
virtual System.Reactive.Concurrency.LocalScheduler.Now.get -> System.DateTimeOffset
virtual System.Reactive.Concurrency.LocalScheduler.Schedule<TState>(TState state, System.DateTimeOffset dueTime, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
virtual System.Reactive.Concurrency.LocalScheduler.Schedule<TState>(TState state, System.Func<System.Reactive.Concurrency.IScheduler!, TState, System.IDisposable!>! action) -> System.IDisposable!
virtual System.Reactive.Concurrency.LocalScheduler.StartStopwatch() -> System.Reactive.Concurrency.IStopwatch!
virtual System.Reactive.Concurrency.VirtualTimeSchedulerBase<TAbsolute, TRelative>.GetService(System.Type! serviceType) -> object?
virtual System.Reactive.ObserverBase<T>.Dispose(bool disposing) -> void
virtual System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider.GetService<T>(object![]! args) -> T?
