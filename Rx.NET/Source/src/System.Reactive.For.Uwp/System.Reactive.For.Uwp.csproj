<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Note: our workaround for the lack of uap10.0.xxxxx support requires use of TargetFrameworks (plural)
    even when there's just a single target. -->
    <TargetFrameworks>uap10.0.18362</TargetFrameworks>
    <RootNamespace>System.Reactive.Uwp</RootNamespace>

    <PackageTags>Rx;Reactive;Extensions;Observable;LINQ;Events;Windows Forms</PackageTags>
    <Description>Reactive Extensions (Rx) for .NET</Description>

    <PackageReadmeFile>readme.md</PackageReadmeFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'uap10.0.18362'">
    <!--
    The .NET SDK doesn't expect TargetFrameworks to include uap10.0.18362, so it doesn't understand
    that this project is capable of using projects that target .NET Standard 2.0, so it thinks that
    the reference to System.Reactive.Net is invalid.
    In most cases we work around this by setting ReferringTargetFrameworkForProjectReferences to
    netstandard2.0, which makes the SDK handle this project as though it were targeting netstandard2.0,
    making it happy to resolve the reference to System.Reactive.Net. Unfortunately that won't work here
    because this also references System.Reactive.For.WindowsRuntime, which does not target netstandard2.0.
    For that reference, we need to use the uap10.0.18362.

    Instead, we have to completely disable the SDK's normal target framework resolution (which is executed
    by the GetReferenceNearestTargetFrameworkTask task) for this project.
    -->
    <!--<ReferringTargetFrameworkForProjectReferences></ReferringTargetFrameworkForProjectReferences>-->
  </PropertyGroup>

  <PropertyGroup>
    <Nullable>enable</Nullable>    
  </PropertyGroup>

  <ItemGroup>
    <!-- 19041 not 18362 because the Azure DevOps hosted build agents don't offer 18362, and there appears
         not to be any official supported way to get it on there.
         We end up with a reference to Windows 255.255.255.255 in any case, so as far as I can tell, this
         produces results indistinguishable from what we would get with 18362. The only issue here is that
         in theory it makes it possible for the code to refer to an API that is not available on 18362. In
         practice, we're not doing that, and we don't expect to change this code much in the future, so it
         shouldn't happen.
    -->
    <ReferencePath Include="$(TargetPlatformSdkPath)UnionMetadata\10.0.19041.0\Windows.winmd" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\AssemblyInfo.cs" Link="Properties\AssemblyInfo.cs" />
    <Compile Include="..\System.Reactive.For.WindowsRuntime\AsyncInfoExtensions.cs" Link="AsyncInfoExtensions.cs" />

    <!--
    Although System.Reactive.Net makes its internals available to us, we get the netstandard2.0 target when running
    on UWP, which doesn't include this particular file, so we need to build our own copy.
    -->
    <Compile Include="..\System.Reactive.Net\Internal\HostLifecycleNotifications.Windows.cs" Link="HostLifecycleNotifications.Windows.cs" />
  </ItemGroup>

  <ItemGroup>
    <!--
    The .NET SDK doesn't expect TargetFrameworks to include uap10.0.18362, so it doesn't understand
    that this project is capable of using projects that target .NET Standard 2.0, with the result
    that it reports an error when trying to resolve the reference to System.Reactive.Net. So
    when building for UWP, we explicitly set the target framework here.
    -->
    <ProjectReference Include="..\System.Reactive.Net\System.Reactive.Net.csproj">
      <SetTargetFramework>TargetFramework=netstandard2.0</SetTargetFramework>
    </ProjectReference>
    <ProjectReference Include="..\System.Reactive.For.WindowsRuntime\System.Reactive.For.WindowsRuntime.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Strings_PlatformServices.Designer.cs">
      <DependentUpon>$([MSBuild]::ValueOrDefault('%(Filename)', '').Replace('.Designer.cs', '.resx'))</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Strings_PlatformServices.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Strings_PlatformServices.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Strings_PlatformServices.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Strings_PlatformServices.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Include="build\NuGet.Readme.md" Pack="true" PackagePath="\readme.md" />
  </ItemGroup>
</Project>
