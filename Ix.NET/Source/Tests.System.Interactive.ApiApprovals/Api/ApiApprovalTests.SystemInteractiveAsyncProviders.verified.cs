[assembly: System.CLSCompliant(true)]
[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
namespace System.Linq
{
    [System.Linq.LocalQueryMethodImplementationType(typeof(System.Linq.AsyncEnumerableEx))]
    public static class AsyncQueryableEx
    {
        public static System.Linq.IAsyncQueryable<TSource> Amb<TSource>(this System.Linq.IAsyncQueryable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Linq.IAsyncQueryable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Linq.IAsyncQueryable<TSource> source, int count) { }
        public static System.Linq.IAsyncQueryable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Linq.IAsyncQueryable<TSource> source, int count, int skip) { }
        public static System.Linq.IAsyncQueryable<TSource> Catch<TSource>(this System.Linq.IAsyncQueryable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Linq.IAsyncQueryable<TSource> Catch<TSource, TException>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TException, System.Collections.Generic.IAsyncEnumerable<TSource>>> handler) { }
        public static System.Linq.IAsyncQueryable<TSource> Catch<TSource, TException>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TException, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>>> handler) { }
        public static System.Linq.IAsyncQueryable<TSource> Catch<TSource, TException>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TException, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>>> handler) { }
        public static System.Linq.IAsyncQueryable<TSource> Concat<TSource>(this System.Linq.IAsyncQueryable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> Distinct<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource>(this System.Linq.IAsyncQueryable<TSource> source) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.IObserver<TSource> observer) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task>> onNext) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onNext) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Action onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Linq.Expressions.Expression<System.Action<System.Exception>> onError) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task>> onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.Threading.Tasks.Task>> onError) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>> onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onError) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Linq.Expressions.Expression<System.Action<System.Exception>> onError, System.Action onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.Threading.Tasks.Task>> onError, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task>> onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Do<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.Threading.CancellationToken, System.Threading.Tasks.Task>> onError, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>> onCompleted) { }
        public static System.Linq.IAsyncQueryable<TSource> Expand<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IAsyncEnumerable<TSource>>> selector) { }
        public static System.Linq.IAsyncQueryable<TSource> Expand<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>>> selector) { }
        public static System.Linq.IAsyncQueryable<TSource> Expand<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>>> selector) { }
        public static System.Linq.IAsyncQueryable<TSource> Finally<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Action finallyAction) { }
        public static System.Linq.IAsyncQueryable<TSource> Finally<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task>> finallyAction) { }
        public static System.Linq.IAsyncQueryable<TSource> IgnoreElements<TSource>(this System.Linq.IAsyncQueryable<TSource> source) { }
        public static System.Threading.Tasks.ValueTask<bool> IsEmptyAsync<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<TSource> MaxAsync<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Collections.Generic.IComparer<TSource>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Linq.IAsyncQueryable<TSource> Merge<TSource>(this System.Linq.IAsyncQueryable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Threading.Tasks.ValueTask<TSource> MinAsync<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Collections.Generic.IComparer<TSource>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Linq.IAsyncQueryable<TSource> OnErrorResumeNext<TSource>(this System.Linq.IAsyncQueryable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Linq.IAsyncQueryable<TSource> Repeat<TSource>(this System.Linq.IAsyncQueryable<TSource> source) { }
        public static System.Linq.IAsyncQueryable<TSource> Repeat<TSource>(this System.Linq.IAsyncQueryable<TSource> source, int count) { }
        public static System.Linq.IAsyncQueryable<TSource> Retry<TSource>(this System.Linq.IAsyncQueryable<TSource> source) { }
        public static System.Linq.IAsyncQueryable<TSource> Retry<TSource>(this System.Linq.IAsyncQueryable<TSource> source, int retryCount) { }
        public static System.Linq.IAsyncQueryable<TSource> Scan<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TSource>>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TSource> Scan<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TSource> Scan<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TSource>>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TAccumulate> Scan<TSource, TAccumulate>(this System.Linq.IAsyncQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, System.Threading.Tasks.ValueTask<TAccumulate>>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TAccumulate> Scan<TSource, TAccumulate>(this System.Linq.IAsyncQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TAccumulate> Scan<TSource, TAccumulate>(this System.Linq.IAsyncQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>> accumulator) { }
        public static System.Linq.IAsyncQueryable<TOther> SelectMany<TSource, TOther>(this System.Linq.IAsyncQueryable<TSource> source, System.Collections.Generic.IAsyncEnumerable<TOther> other) { }
        public static System.Linq.IAsyncQueryable<TSource> StartWith<TSource>(this System.Linq.IAsyncQueryable<TSource> source, params TSource[] values) { }
        public static System.Linq.IAsyncQueryable<TSource> Timeout<TSource>(this System.Linq.IAsyncQueryable<TSource> source, System.TimeSpan timeout) { }
    }
}