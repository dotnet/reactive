[assembly: System.CLSCompliant(true)]
[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
namespace System.Linq
{
    public static class AsyncEnumerableEx
    {
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Amb<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>[] sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Amb<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Amb<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, int count) { }
        public static System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, int count, int skip) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>[] sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource, TException>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TException, System.Collections.Generic.IAsyncEnumerable<TSource>> handler)
            where TException : System.Exception { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource, TException>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TException, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> handler)
            where TException : System.Exception { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Catch<TSource, TException>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TException, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> handler)
            where TException : System.Exception { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Concat<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>[] sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Concat<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Concat<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Defer<TSource>(System.Func<System.Collections.Generic.IAsyncEnumerable<TSource>> factory) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Defer<TSource>(System.Func<System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<TSource>>> factory) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Defer<TSource>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<TSource>>> factory) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Distinct<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Action<TSource> onNext) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task> onNext) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task> onNext) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.IObserver<TSource> observer) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Action<TSource> onNext, System.Action onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Action<TSource> onNext, System.Action<System.Exception> onError) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task> onNext, System.Func<System.Threading.Tasks.Task> onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task> onNext, System.Func<System.Exception, System.Threading.Tasks.Task> onError) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task> onNext, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task> onNext, System.Func<System.Exception, System.Threading.CancellationToken, System.Threading.Tasks.Task> onError) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Action<TSource> onNext, System.Action<System.Exception> onError, System.Action onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task> onNext, System.Func<System.Exception, System.Threading.Tasks.Task> onError, System.Func<System.Threading.Tasks.Task> onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task> onNext, System.Func<System.Exception, System.Threading.CancellationToken, System.Threading.Tasks.Task> onError, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onCompleted) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Expand<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Collections.Generic.IAsyncEnumerable<TSource>> selector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Expand<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> selector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Expand<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> selector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Finally<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Action finallyAction) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Finally<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<System.Threading.Tasks.Task> finallyAction) { }
        public static System.Collections.Generic.IAsyncEnumerable<TResult> Generate<TState, TResult>(TState initialState, System.Func<TState, bool> condition, System.Func<TState, TState> iterate, System.Func<TState, TResult> resultSelector) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> IgnoreElements<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source) { }
        public static System.Threading.Tasks.ValueTask<bool> IsEmptyAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<TSource> MaxAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Collections.Generic.IComparer<TSource>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MaxByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Merge<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>[] sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Merge<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Merge<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Threading.Tasks.ValueTask<TSource> MinAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Collections.Generic.IComparer<TSource>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey>? comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.IList<TSource>> MinByAsync<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IAsyncEnumerable<TValue> Never<TValue>() { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> OnErrorResumeNext<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>[] sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>> sources) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> OnErrorResumeNext<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> first, System.Collections.Generic.IAsyncEnumerable<TSource> second) { }
        public static System.Collections.Generic.IAsyncEnumerable<TResult> Repeat<TResult>(TResult element) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, int count) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, int retryCount) { }
        public static System.Collections.Generic.IAsyncEnumerable<TValue> Return<TValue>(TValue value) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Scan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TSource>> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Scan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TSource, TSource> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Scan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Func<TSource, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TSource>> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TAccumulate> Scan<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.Tasks.ValueTask<TAccumulate>> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TAccumulate> Scan<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TAccumulate> Scan<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>> accumulator) { }
        public static System.Collections.Generic.IAsyncEnumerable<TOther> SelectMany<TSource, TOther>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.Collections.Generic.IAsyncEnumerable<TOther> other) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> StartWith<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, params TSource[] values) { }
        public static System.Collections.Generic.IAsyncEnumerable<TValue> Throw<TValue>(System.Exception exception) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Timeout<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource> source, System.TimeSpan timeout) { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Using<TSource, TResource>(System.Func<System.Threading.Tasks.Task<TResource>> resourceFactory, System.Func<TResource, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> enumerableFactory)
            where TResource : System.IDisposable { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Using<TSource, TResource>(System.Func<TResource> resourceFactory, System.Func<TResource, System.Collections.Generic.IAsyncEnumerable<TSource>> enumerableFactory)
            where TResource : System.IDisposable { }
        public static System.Collections.Generic.IAsyncEnumerable<TSource> Using<TSource, TResource>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResource>> resourceFactory, System.Func<TResource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IAsyncEnumerable<TSource>>> enumerableFactory)
            where TResource : System.IDisposable { }
    }
}